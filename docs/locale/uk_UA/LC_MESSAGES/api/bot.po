# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-01 22:51+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../api/bot.rst:3
msgid "Bot"
msgstr ""

#: ../../api/bot.rst:5
msgid ""
"Bot instance can be created from :code:`aiogram.Bot` (:code:`from aiogram"
" import Bot`) and you can't use methods without instance of bot with "
"configured token."
msgstr ""

#: ../../api/bot.rst:8
msgid ""
"This class has aliases for all methods and named in "
":code:`lower_camel_case`."
msgstr ""

#: ../../api/bot.rst:10
msgid ""
"For example :code:`sendMessage` named :code:`send_message` and has the "
"same specification with all class-based methods."
msgstr ""

#: aiogram.client.bot.Bot:1 of
msgid ""
"Bases: :py:class:`~aiogram.utils.mixins.ContextInstanceMixin`\\ "
"[:py:class:`Bot`]"
msgstr ""

#: aiogram.client.bot.Bot:1 of
msgid "Bot class"
msgstr ""

#: aiogram.client.bot.Bot.__init__ aiogram.client.bot.Bot.add_sticker_to_set
#: aiogram.client.bot.Bot.answer_callback_query
#: aiogram.client.bot.Bot.answer_inline_query
#: aiogram.client.bot.Bot.answer_pre_checkout_query
#: aiogram.client.bot.Bot.answer_shipping_query
#: aiogram.client.bot.Bot.answer_web_app_query
#: aiogram.client.bot.Bot.approve_chat_join_request
#: aiogram.client.bot.Bot.ban_chat_member
#: aiogram.client.bot.Bot.ban_chat_sender_chat aiogram.client.bot.Bot.close
#: aiogram.client.bot.Bot.context aiogram.client.bot.Bot.copy_message
#: aiogram.client.bot.Bot.create_chat_invite_link
#: aiogram.client.bot.Bot.create_invoice_link
#: aiogram.client.bot.Bot.create_new_sticker_set
#: aiogram.client.bot.Bot.decline_chat_join_request
#: aiogram.client.bot.Bot.delete_chat_photo
#: aiogram.client.bot.Bot.delete_chat_sticker_set
#: aiogram.client.bot.Bot.delete_message
#: aiogram.client.bot.Bot.delete_my_commands
#: aiogram.client.bot.Bot.delete_sticker_from_set
#: aiogram.client.bot.Bot.delete_webhook aiogram.client.bot.Bot.download
#: aiogram.client.bot.Bot.download_file
#: aiogram.client.bot.Bot.edit_chat_invite_link
#: aiogram.client.bot.Bot.edit_message_caption
#: aiogram.client.bot.Bot.edit_message_live_location
#: aiogram.client.bot.Bot.edit_message_media
#: aiogram.client.bot.Bot.edit_message_reply_markup
#: aiogram.client.bot.Bot.edit_message_text
#: aiogram.client.bot.Bot.export_chat_invite_link
#: aiogram.client.bot.Bot.forward_message aiogram.client.bot.Bot.get_chat
#: aiogram.client.bot.Bot.get_chat_administrators
#: aiogram.client.bot.Bot.get_chat_member
#: aiogram.client.bot.Bot.get_chat_member_count
#: aiogram.client.bot.Bot.get_chat_members_count
#: aiogram.client.bot.Bot.get_chat_menu_button
#: aiogram.client.bot.Bot.get_custom_emoji_stickers
#: aiogram.client.bot.Bot.get_file aiogram.client.bot.Bot.get_game_high_scores
#: aiogram.client.bot.Bot.get_me aiogram.client.bot.Bot.get_my_commands
#: aiogram.client.bot.Bot.get_my_default_administrator_rights
#: aiogram.client.bot.Bot.get_sticker_set aiogram.client.bot.Bot.get_updates
#: aiogram.client.bot.Bot.get_user_profile_photos
#: aiogram.client.bot.Bot.get_webhook_info
#: aiogram.client.bot.Bot.kick_chat_member aiogram.client.bot.Bot.leave_chat
#: aiogram.client.bot.Bot.log_out aiogram.client.bot.Bot.pin_chat_message
#: aiogram.client.bot.Bot.promote_chat_member
#: aiogram.client.bot.Bot.restrict_chat_member
#: aiogram.client.bot.Bot.revoke_chat_invite_link
#: aiogram.client.bot.Bot.send_animation aiogram.client.bot.Bot.send_audio
#: aiogram.client.bot.Bot.send_chat_action aiogram.client.bot.Bot.send_contact
#: aiogram.client.bot.Bot.send_dice aiogram.client.bot.Bot.send_document
#: aiogram.client.bot.Bot.send_game aiogram.client.bot.Bot.send_invoice
#: aiogram.client.bot.Bot.send_location aiogram.client.bot.Bot.send_media_group
#: aiogram.client.bot.Bot.send_message aiogram.client.bot.Bot.send_photo
#: aiogram.client.bot.Bot.send_poll aiogram.client.bot.Bot.send_sticker
#: aiogram.client.bot.Bot.send_venue aiogram.client.bot.Bot.send_video
#: aiogram.client.bot.Bot.send_video_note aiogram.client.bot.Bot.send_voice
#: aiogram.client.bot.Bot.set_chat_administrator_custom_title
#: aiogram.client.bot.Bot.set_chat_description
#: aiogram.client.bot.Bot.set_chat_menu_button
#: aiogram.client.bot.Bot.set_chat_permissions
#: aiogram.client.bot.Bot.set_chat_photo
#: aiogram.client.bot.Bot.set_chat_sticker_set
#: aiogram.client.bot.Bot.set_chat_title aiogram.client.bot.Bot.set_game_score
#: aiogram.client.bot.Bot.set_my_commands
#: aiogram.client.bot.Bot.set_my_default_administrator_rights
#: aiogram.client.bot.Bot.set_passport_data_errors
#: aiogram.client.bot.Bot.set_sticker_position_in_set
#: aiogram.client.bot.Bot.set_sticker_set_thumb
#: aiogram.client.bot.Bot.set_webhook
#: aiogram.client.bot.Bot.stop_message_live_location
#: aiogram.client.bot.Bot.stop_poll aiogram.client.bot.Bot.unban_chat_member
#: aiogram.client.bot.Bot.unban_chat_sender_chat
#: aiogram.client.bot.Bot.unpin_all_chat_messages
#: aiogram.client.bot.Bot.unpin_chat_message
#: aiogram.client.bot.Bot.upload_sticker_file of
msgid "Parameters"
msgstr ""

#: aiogram.client.bot.Bot.__init__:1 of
msgid "Telegram Bot token `Obtained from @BotFather <https://t.me/BotFather>`_"
msgstr ""

#: aiogram.client.bot.Bot.__init__:2 of
msgid ""
"HTTP Client session (For example AiohttpSession). If not specified it "
"will be automatically created."
msgstr ""

#: aiogram.client.bot.Bot.__init__:4 of
msgid ""
"Default parse mode. If specified it will be propagated into the API "
"methods at runtime."
msgstr ""

#: aiogram.client.bot.Bot.__init__ of
msgid "Raises"
msgstr ""

#: aiogram.client.bot.Bot.__init__:6 of
msgid "When token has invalid format this exception will be raised"
msgstr ""

#: aiogram.client.bot.Bot.id:1 of
msgid "Get bot ID from token"
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set
#: aiogram.client.bot.Bot.answer_callback_query
#: aiogram.client.bot.Bot.answer_inline_query
#: aiogram.client.bot.Bot.answer_pre_checkout_query
#: aiogram.client.bot.Bot.answer_shipping_query
#: aiogram.client.bot.Bot.answer_web_app_query
#: aiogram.client.bot.Bot.approve_chat_join_request
#: aiogram.client.bot.Bot.ban_chat_member
#: aiogram.client.bot.Bot.ban_chat_sender_chat aiogram.client.bot.Bot.close
#: aiogram.client.bot.Bot.context aiogram.client.bot.Bot.copy_message
#: aiogram.client.bot.Bot.create_chat_invite_link
#: aiogram.client.bot.Bot.create_invoice_link
#: aiogram.client.bot.Bot.create_new_sticker_set
#: aiogram.client.bot.Bot.decline_chat_join_request
#: aiogram.client.bot.Bot.delete_chat_photo
#: aiogram.client.bot.Bot.delete_chat_sticker_set
#: aiogram.client.bot.Bot.delete_message
#: aiogram.client.bot.Bot.delete_my_commands
#: aiogram.client.bot.Bot.delete_sticker_from_set
#: aiogram.client.bot.Bot.delete_webhook
#: aiogram.client.bot.Bot.edit_chat_invite_link
#: aiogram.client.bot.Bot.edit_message_caption
#: aiogram.client.bot.Bot.edit_message_live_location
#: aiogram.client.bot.Bot.edit_message_media
#: aiogram.client.bot.Bot.edit_message_reply_markup
#: aiogram.client.bot.Bot.edit_message_text
#: aiogram.client.bot.Bot.export_chat_invite_link
#: aiogram.client.bot.Bot.forward_message aiogram.client.bot.Bot.get_chat
#: aiogram.client.bot.Bot.get_chat_administrators
#: aiogram.client.bot.Bot.get_chat_member
#: aiogram.client.bot.Bot.get_chat_member_count
#: aiogram.client.bot.Bot.get_chat_members_count
#: aiogram.client.bot.Bot.get_chat_menu_button
#: aiogram.client.bot.Bot.get_custom_emoji_stickers
#: aiogram.client.bot.Bot.get_file aiogram.client.bot.Bot.get_game_high_scores
#: aiogram.client.bot.Bot.get_me aiogram.client.bot.Bot.get_my_commands
#: aiogram.client.bot.Bot.get_my_default_administrator_rights
#: aiogram.client.bot.Bot.get_sticker_set aiogram.client.bot.Bot.get_updates
#: aiogram.client.bot.Bot.get_user_profile_photos
#: aiogram.client.bot.Bot.get_webhook_info aiogram.client.bot.Bot.id
#: aiogram.client.bot.Bot.kick_chat_member aiogram.client.bot.Bot.leave_chat
#: aiogram.client.bot.Bot.log_out aiogram.client.bot.Bot.pin_chat_message
#: aiogram.client.bot.Bot.promote_chat_member
#: aiogram.client.bot.Bot.restrict_chat_member
#: aiogram.client.bot.Bot.revoke_chat_invite_link
#: aiogram.client.bot.Bot.send_animation aiogram.client.bot.Bot.send_audio
#: aiogram.client.bot.Bot.send_chat_action aiogram.client.bot.Bot.send_contact
#: aiogram.client.bot.Bot.send_dice aiogram.client.bot.Bot.send_document
#: aiogram.client.bot.Bot.send_game aiogram.client.bot.Bot.send_invoice
#: aiogram.client.bot.Bot.send_location aiogram.client.bot.Bot.send_media_group
#: aiogram.client.bot.Bot.send_message aiogram.client.bot.Bot.send_photo
#: aiogram.client.bot.Bot.send_poll aiogram.client.bot.Bot.send_sticker
#: aiogram.client.bot.Bot.send_venue aiogram.client.bot.Bot.send_video
#: aiogram.client.bot.Bot.send_video_note aiogram.client.bot.Bot.send_voice
#: aiogram.client.bot.Bot.set_chat_administrator_custom_title
#: aiogram.client.bot.Bot.set_chat_description
#: aiogram.client.bot.Bot.set_chat_menu_button
#: aiogram.client.bot.Bot.set_chat_permissions
#: aiogram.client.bot.Bot.set_chat_photo
#: aiogram.client.bot.Bot.set_chat_sticker_set
#: aiogram.client.bot.Bot.set_chat_title aiogram.client.bot.Bot.set_game_score
#: aiogram.client.bot.Bot.set_my_commands
#: aiogram.client.bot.Bot.set_my_default_administrator_rights
#: aiogram.client.bot.Bot.set_passport_data_errors
#: aiogram.client.bot.Bot.set_sticker_position_in_set
#: aiogram.client.bot.Bot.set_sticker_set_thumb
#: aiogram.client.bot.Bot.set_webhook
#: aiogram.client.bot.Bot.stop_message_live_location
#: aiogram.client.bot.Bot.stop_poll aiogram.client.bot.Bot.unban_chat_member
#: aiogram.client.bot.Bot.unban_chat_sender_chat
#: aiogram.client.bot.Bot.unpin_all_chat_messages
#: aiogram.client.bot.Bot.unpin_chat_message
#: aiogram.client.bot.Bot.upload_sticker_file of
msgid "Returns"
msgstr ""

#: aiogram.client.bot.Bot.context:1 of
msgid "Generate bot context"
msgstr ""

#: aiogram.client.bot.Bot.download_file:1 of
msgid "Download file by file_path to destination."
msgstr ""

#: aiogram.client.bot.Bot.download:3 aiogram.client.bot.Bot.download_file:3 of
msgid ""
"If you want to automatically create destination (:class:`io.BytesIO`) use"
" default value of destination and handle result of this method."
msgstr ""

#: aiogram.client.bot.Bot.download_file:6 of
msgid ""
"File path on Telegram server (You can get it from "
":obj:`aiogram.types.File`)"
msgstr ""

#: aiogram.client.bot.Bot.download:7 aiogram.client.bot.Bot.download_file:7 of
msgid ""
"Filename, file path or instance of :class:`io.IOBase`. For e.g. "
":class:`io.BytesIO`, defaults to None"
msgstr ""

#: aiogram.client.bot.Bot.download:8 aiogram.client.bot.Bot.download_file:8 of
msgid "Total timeout in seconds, defaults to 30"
msgstr ""

#: aiogram.client.bot.Bot.download:9 aiogram.client.bot.Bot.download_file:9 of
msgid "File chunks size, defaults to 64 kb"
msgstr ""

#: aiogram.client.bot.Bot.download:10 aiogram.client.bot.Bot.download_file:10
#: of
msgid ""
"Go to start of file when downloading is finished. Used only for "
"destination with :class:`typing.BinaryIO` type, defaults to True"
msgstr ""

#: aiogram.client.bot.Bot.download:1 of
msgid "Download file by file_id or Downloadable object to destination."
msgstr ""

#: aiogram.client.bot.Bot.download:6 of
msgid "file_id or Downloadable object"
msgstr ""

#: aiogram.client.bot.Bot.get_updates:1 of
msgid ""
"Use this method to receive incoming updates using long polling (`wiki "
"<https://en.wikipedia.org/wiki/Push_technology#Long_polling>`_). Returns "
"an Array of :class:`aiogram.types.update.Update` objects."
msgstr ""

#: aiogram.client.bot.Bot.get_updates:3 aiogram.client.bot.Bot.set_webhook:4 of
msgid "**Notes**"
msgstr ""

#: aiogram.client.bot.Bot.get_updates:5 of
msgid "**1.** This method will not work if an outgoing webhook is set up."
msgstr ""

#: aiogram.client.bot.Bot.get_updates:7 of
msgid ""
"**2.** In order to avoid getting duplicate updates, recalculate *offset* "
"after each server response."
msgstr ""

#: aiogram.client.bot.Bot.get_updates:9 of
msgid "Source: https://core.telegram.org/bots/api#getupdates"
msgstr ""

#: aiogram.client.bot.Bot.get_updates:11 of
msgid ""
"Identifier of the first update to be returned. Must be greater by one "
"than the highest among the identifiers of previously received updates. By"
" default, updates starting with the earliest unconfirmed update are "
"returned. An update is considered confirmed as soon as "
":class:`aiogram.methods.get_updates.GetUpdates` is called with an "
"*offset* higher than its *update_id*. The negative offset can be "
"specified to retrieve updates starting from *-offset* update from the end"
" of the updates queue. All previous updates will forgotten."
msgstr ""

#: aiogram.client.bot.Bot.get_updates:12 of
msgid ""
"Limits the number of updates to be retrieved. Values between 1-100 are "
"accepted. Defaults to 100."
msgstr ""

#: aiogram.client.bot.Bot.get_updates:13 of
msgid ""
"Timeout in seconds for long polling. Defaults to 0, i.e. usual short "
"polling. Should be positive, short polling should be used for testing "
"purposes only."
msgstr ""

#: aiogram.client.bot.Bot.get_updates:14 aiogram.client.bot.Bot.set_webhook:19
#: of
msgid ""
"A JSON-serialized list of the update types you want your bot to receive. "
"For example, specify ['message', 'edited_channel_post', 'callback_query']"
" to only receive updates of these types. See "
":class:`aiogram.types.update.Update` for a complete list of available "
"update types. Specify an empty list to receive all update types except "
"*chat_member* (default). If not specified, the previous setting will be "
"used."
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:12
#: aiogram.client.bot.Bot.answer_callback_query:12
#: aiogram.client.bot.Bot.answer_inline_query:14
#: aiogram.client.bot.Bot.answer_pre_checkout_query:8
#: aiogram.client.bot.Bot.answer_shipping_query:9
#: aiogram.client.bot.Bot.answer_web_app_query:7
#: aiogram.client.bot.Bot.approve_chat_join_request:7
#: aiogram.client.bot.Bot.ban_chat_member:9
#: aiogram.client.bot.Bot.ban_chat_sender_chat:7 aiogram.client.bot.Bot.close:5
#: aiogram.client.bot.Bot.copy_message:16
#: aiogram.client.bot.Bot.create_chat_invite_link:10
#: aiogram.client.bot.Bot.create_invoice_link:25
#: aiogram.client.bot.Bot.create_new_sticker_set:14
#: aiogram.client.bot.Bot.decline_chat_join_request:7
#: aiogram.client.bot.Bot.delete_chat_photo:6
#: aiogram.client.bot.Bot.delete_chat_sticker_set:6
#: aiogram.client.bot.Bot.delete_message:23
#: aiogram.client.bot.Bot.delete_my_commands:7
#: aiogram.client.bot.Bot.delete_sticker_from_set:6
#: aiogram.client.bot.Bot.delete_webhook:6
#: aiogram.client.bot.Bot.edit_chat_invite_link:11
#: aiogram.client.bot.Bot.edit_message_caption:12
#: aiogram.client.bot.Bot.edit_message_live_location:14
#: aiogram.client.bot.Bot.edit_message_media:10
#: aiogram.client.bot.Bot.edit_message_reply_markup:9
#: aiogram.client.bot.Bot.edit_message_text:13
#: aiogram.client.bot.Bot.export_chat_invite_link:8
#: aiogram.client.bot.Bot.forward_message:10 aiogram.client.bot.Bot.get_chat:6
#: aiogram.client.bot.Bot.get_chat_administrators:6
#: aiogram.client.bot.Bot.get_chat_member:7
#: aiogram.client.bot.Bot.get_chat_member_count:6
#: aiogram.client.bot.Bot.get_chat_members_count:10
#: aiogram.client.bot.Bot.get_chat_menu_button:6
#: aiogram.client.bot.Bot.get_custom_emoji_stickers:6
#: aiogram.client.bot.Bot.get_file:7
#: aiogram.client.bot.Bot.get_game_high_scores:11
#: aiogram.client.bot.Bot.get_me:5 aiogram.client.bot.Bot.get_my_commands:7
#: aiogram.client.bot.Bot.get_my_default_administrator_rights:6
#: aiogram.client.bot.Bot.get_sticker_set:6
#: aiogram.client.bot.Bot.get_updates:15
#: aiogram.client.bot.Bot.get_user_profile_photos:8
#: aiogram.client.bot.Bot.get_webhook_info:5
#: aiogram.client.bot.Bot.kick_chat_member:13
#: aiogram.client.bot.Bot.leave_chat:6 aiogram.client.bot.Bot.log_out:5
#: aiogram.client.bot.Bot.pin_chat_message:8
#: aiogram.client.bot.Bot.promote_chat_member:18
#: aiogram.client.bot.Bot.restrict_chat_member:9
#: aiogram.client.bot.Bot.revoke_chat_invite_link:7
#: aiogram.client.bot.Bot.send_animation:19
#: aiogram.client.bot.Bot.send_audio:20
#: aiogram.client.bot.Bot.send_chat_action:11
#: aiogram.client.bot.Bot.send_contact:15 aiogram.client.bot.Bot.send_dice:12
#: aiogram.client.bot.Bot.send_document:17 aiogram.client.bot.Bot.send_game:12
#: aiogram.client.bot.Bot.send_invoice:32
#: aiogram.client.bot.Bot.send_location:17
#: aiogram.client.bot.Bot.send_media_group:11
#: aiogram.client.bot.Bot.send_message:15 aiogram.client.bot.Bot.send_photo:15
#: aiogram.client.bot.Bot.send_poll:23 aiogram.client.bot.Bot.send_sticker:12
#: aiogram.client.bot.Bot.send_venue:19 aiogram.client.bot.Bot.send_video:20
#: aiogram.client.bot.Bot.send_video_note:15
#: aiogram.client.bot.Bot.send_voice:16
#: aiogram.client.bot.Bot.set_chat_administrator_custom_title:8
#: aiogram.client.bot.Bot.set_chat_description:7
#: aiogram.client.bot.Bot.set_chat_menu_button:7
#: aiogram.client.bot.Bot.set_chat_permissions:7
#: aiogram.client.bot.Bot.set_chat_photo:7
#: aiogram.client.bot.Bot.set_chat_sticker_set:7
#: aiogram.client.bot.Bot.set_chat_title:7
#: aiogram.client.bot.Bot.set_game_score:12
#: aiogram.client.bot.Bot.set_my_commands:8
#: aiogram.client.bot.Bot.set_my_default_administrator_rights:7
#: aiogram.client.bot.Bot.set_passport_data_errors:8
#: aiogram.client.bot.Bot.set_sticker_position_in_set:7
#: aiogram.client.bot.Bot.set_sticker_set_thumb:8
#: aiogram.client.bot.Bot.set_webhook:22
#: aiogram.client.bot.Bot.stop_message_live_location:9
#: aiogram.client.bot.Bot.stop_poll:8
#: aiogram.client.bot.Bot.unban_chat_member:8
#: aiogram.client.bot.Bot.unban_chat_sender_chat:7
#: aiogram.client.bot.Bot.unpin_all_chat_messages:6
#: aiogram.client.bot.Bot.unpin_chat_message:7
#: aiogram.client.bot.Bot.upload_sticker_file:7 of
msgid "Request timeout"
msgstr ""

#: aiogram.client.bot.Bot.get_updates:16 of
msgid "Returns an Array of Update objects."
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:1 of
msgid ""
"Use this method to specify a URL and receive incoming updates via an "
"outgoing webhook. Whenever there is an update for the bot, we will send "
"an HTTPS POST request to the specified URL, containing a JSON-serialized "
":class:`aiogram.types.update.Update`. In case of an unsuccessful request,"
" we will give up after a reasonable amount of attempts. Returns "
":code:`True` on success. If you'd like to make sure that the webhook was "
"set by you, you can specify secret data in the parameter *secret_token*. "
"If specified, the request will contain a header 'X-Telegram-Bot-Api-"
"Secret-Token' with the secret token as content."
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:6 of
msgid ""
"**1.** You will not be able to receive updates using "
":class:`aiogram.methods.get_updates.GetUpdates` for as long as an "
"outgoing webhook is set up."
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:8 of
msgid ""
"**2.** To use a self-signed certificate, you need to upload your `public "
"key certificate <https://core.telegram.org/bots/self-signed>`_ using "
"*certificate* parameter. Please upload as InputFile, sending a String "
"will not work."
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:10 of
msgid ""
"**3.** Ports currently supported *for webhooks*: **443, 80, 88, 8443**. "
"If you're having any trouble setting up webhooks, please check out this "
"`amazing guide to webhooks <https://core.telegram.org/bots/webhooks>`_."
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:13 of
msgid "Source: https://core.telegram.org/bots/api#setwebhook"
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:15 of
msgid ""
"HTTPS URL to send updates to. Use an empty string to remove webhook "
"integration"
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:16 of
msgid ""
"Upload your public key certificate so that the root certificate in use "
"can be checked. See our `self-signed guide "
"<https://core.telegram.org/bots/self-signed>`_ for details."
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:17 of
msgid ""
"The fixed IP address which will be used to send webhook requests instead "
"of the IP address resolved through DNS"
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:18 of
msgid ""
"The maximum allowed number of simultaneous HTTPS connections to the "
"webhook for update delivery, 1-100. Defaults to *40*. Use lower values to"
" limit the load on your bot's server, and higher values to increase your "
"bot's throughput."
msgstr ""

#: aiogram.client.bot.Bot.delete_webhook:5
#: aiogram.client.bot.Bot.set_webhook:20 of
msgid "Pass :code:`True` to drop all pending updates"
msgstr ""

#: aiogram.client.bot.Bot.set_webhook:21 of
msgid ""
"A secret token to be sent in a header 'X-Telegram-Bot-Api-Secret-Token' "
"in every webhook request, 1-256 characters. Only characters :code:`A-Z`, "
":code:`a-z`, :code:`0-9`, :code:`_` and :code:`-` are allowed. The header"
" is useful to ensure that the request comes from a webhook set by you."
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:13
#: aiogram.client.bot.Bot.approve_chat_join_request:8
#: aiogram.client.bot.Bot.ban_chat_sender_chat:8
#: aiogram.client.bot.Bot.create_new_sticker_set:15
#: aiogram.client.bot.Bot.decline_chat_join_request:8
#: aiogram.client.bot.Bot.delete_chat_photo:7
#: aiogram.client.bot.Bot.delete_message:24
#: aiogram.client.bot.Bot.delete_my_commands:8
#: aiogram.client.bot.Bot.delete_sticker_from_set:7
#: aiogram.client.bot.Bot.delete_webhook:7 aiogram.client.bot.Bot.leave_chat:7
#: aiogram.client.bot.Bot.log_out:6 aiogram.client.bot.Bot.pin_chat_message:9
#: aiogram.client.bot.Bot.promote_chat_member:19
#: aiogram.client.bot.Bot.restrict_chat_member:10
#: aiogram.client.bot.Bot.send_chat_action:12
#: aiogram.client.bot.Bot.set_chat_administrator_custom_title:9
#: aiogram.client.bot.Bot.set_chat_description:8
#: aiogram.client.bot.Bot.set_chat_menu_button:8
#: aiogram.client.bot.Bot.set_chat_permissions:8
#: aiogram.client.bot.Bot.set_chat_photo:8
#: aiogram.client.bot.Bot.set_chat_title:8
#: aiogram.client.bot.Bot.set_my_commands:9
#: aiogram.client.bot.Bot.set_my_default_administrator_rights:8
#: aiogram.client.bot.Bot.set_sticker_position_in_set:8
#: aiogram.client.bot.Bot.set_sticker_set_thumb:9
#: aiogram.client.bot.Bot.set_webhook:23
#: aiogram.client.bot.Bot.unban_chat_sender_chat:8
#: aiogram.client.bot.Bot.unpin_all_chat_messages:7
#: aiogram.client.bot.Bot.unpin_chat_message:8 of
msgid "Returns True on success."
msgstr ""

#: aiogram.client.bot.Bot.delete_webhook:1 of
msgid ""
"Use this method to remove webhook integration if you decide to switch "
"back to :class:`aiogram.methods.get_updates.GetUpdates`. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.delete_webhook:3 of
msgid "Source: https://core.telegram.org/bots/api#deletewebhook"
msgstr ""

#: aiogram.client.bot.Bot.get_webhook_info:1 of
msgid ""
"Use this method to get current webhook status. Requires no parameters. On"
" success, returns a :class:`aiogram.types.webhook_info.WebhookInfo` "
"object. If the bot is using "
":class:`aiogram.methods.get_updates.GetUpdates`, will return an object "
"with the *url* field empty."
msgstr ""

#: aiogram.client.bot.Bot.get_webhook_info:3 of
msgid "Source: https://core.telegram.org/bots/api#getwebhookinfo"
msgstr ""

#: aiogram.client.bot.Bot.get_webhook_info:6 of
msgid ""
"On success, returns a WebhookInfo object. If the bot is using getUpdates,"
" will return an object with the url field empty."
msgstr ""

#: aiogram.client.bot.Bot.get_me:1 of
msgid ""
"A simple method for testing your bot's authentication token. Requires no "
"parameters. Returns basic information about the bot in form of a "
":class:`aiogram.types.user.User` object."
msgstr ""

#: aiogram.client.bot.Bot.get_me:3 of
msgid "Source: https://core.telegram.org/bots/api#getme"
msgstr ""

#: aiogram.client.bot.Bot.get_me:6 of
msgid "Returns basic information about the bot in form of a User object."
msgstr ""

#: aiogram.client.bot.Bot.log_out:1 of
msgid ""
"Use this method to log out from the cloud Bot API server before launching"
" the bot locally. You **must** log out the bot before running it locally,"
" otherwise there is no guarantee that the bot will receive updates. After"
" a successful call, you can immediately log in on a local server, but "
"will not be able to log in back to the cloud Bot API server for 10 "
"minutes. Returns :code:`True` on success. Requires no parameters."
msgstr ""

#: aiogram.client.bot.Bot.log_out:3 of
msgid "Source: https://core.telegram.org/bots/api#logout"
msgstr ""

#: aiogram.client.bot.Bot.close:1 of
msgid ""
"Use this method to close the bot instance before moving it from one local"
" server to another. You need to delete the webhook before calling this "
"method to ensure that the bot isn't launched again after server restart. "
"The method will return error 429 in the first 10 minutes after the bot is"
" launched. Returns :code:`True` on success. Requires no parameters."
msgstr ""

#: aiogram.client.bot.Bot.close:3 of
msgid "Source: https://core.telegram.org/bots/api#close"
msgstr ""

#: aiogram.client.bot.Bot.close:6 of
msgid ""
"The method will return error 429 in the first 10 minutes after the bot is"
" launched. Returns True on success."
msgstr ""

#: aiogram.client.bot.Bot.send_message:1 of
msgid ""
"Use this method to send text messages. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_message:3 of
msgid "Source: https://core.telegram.org/bots/api#sendmessage"
msgstr ""

#: aiogram.client.bot.Bot.approve_chat_join_request:5
#: aiogram.client.bot.Bot.ban_chat_sender_chat:5
#: aiogram.client.bot.Bot.copy_message:5
#: aiogram.client.bot.Bot.create_chat_invite_link:5
#: aiogram.client.bot.Bot.decline_chat_join_request:5
#: aiogram.client.bot.Bot.delete_chat_photo:5
#: aiogram.client.bot.Bot.delete_message:21
#: aiogram.client.bot.Bot.edit_chat_invite_link:5
#: aiogram.client.bot.Bot.export_chat_invite_link:7
#: aiogram.client.bot.Bot.forward_message:5
#: aiogram.client.bot.Bot.pin_chat_message:5
#: aiogram.client.bot.Bot.promote_chat_member:5
#: aiogram.client.bot.Bot.send_animation:5 aiogram.client.bot.Bot.send_audio:6
#: aiogram.client.bot.Bot.send_chat_action:9
#: aiogram.client.bot.Bot.send_contact:5 aiogram.client.bot.Bot.send_dice:5
#: aiogram.client.bot.Bot.send_document:5 aiogram.client.bot.Bot.send_invoice:5
#: aiogram.client.bot.Bot.send_location:5
#: aiogram.client.bot.Bot.send_media_group:5
#: aiogram.client.bot.Bot.send_message:5 aiogram.client.bot.Bot.send_photo:5
#: aiogram.client.bot.Bot.send_poll:5 aiogram.client.bot.Bot.send_sticker:5
#: aiogram.client.bot.Bot.send_venue:5 aiogram.client.bot.Bot.send_video:5
#: aiogram.client.bot.Bot.send_video_note:5 aiogram.client.bot.Bot.send_voice:5
#: aiogram.client.bot.Bot.set_chat_description:5
#: aiogram.client.bot.Bot.set_chat_photo:5
#: aiogram.client.bot.Bot.set_chat_title:5 aiogram.client.bot.Bot.stop_poll:5
#: aiogram.client.bot.Bot.unban_chat_sender_chat:5
#: aiogram.client.bot.Bot.unpin_all_chat_messages:5
#: aiogram.client.bot.Bot.unpin_chat_message:5 of
msgid ""
"Unique identifier for the target chat or username of the target channel "
"(in the format :code:`@channelusername`)"
msgstr ""

#: aiogram.client.bot.Bot.send_message:6 of
msgid "Text of the message to be sent, 1-4096 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_text:9
#: aiogram.client.bot.Bot.send_message:7 of
msgid ""
"Mode for parsing entities in the message text. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_text:10
#: aiogram.client.bot.Bot.send_message:8 of
msgid ""
"A JSON-serialized list of special entities that appear in message text, "
"which can be specified instead of *parse_mode*"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_text:11
#: aiogram.client.bot.Bot.send_message:9 of
msgid "Disables link previews for links in this message"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:11
#: aiogram.client.bot.Bot.forward_message:8
#: aiogram.client.bot.Bot.send_animation:14
#: aiogram.client.bot.Bot.send_audio:15 aiogram.client.bot.Bot.send_contact:10
#: aiogram.client.bot.Bot.send_dice:7 aiogram.client.bot.Bot.send_document:12
#: aiogram.client.bot.Bot.send_game:7 aiogram.client.bot.Bot.send_invoice:27
#: aiogram.client.bot.Bot.send_location:12
#: aiogram.client.bot.Bot.send_message:10 aiogram.client.bot.Bot.send_photo:10
#: aiogram.client.bot.Bot.send_poll:18 aiogram.client.bot.Bot.send_sticker:7
#: aiogram.client.bot.Bot.send_venue:14 aiogram.client.bot.Bot.send_video:15
#: aiogram.client.bot.Bot.send_video_note:10
#: aiogram.client.bot.Bot.send_voice:11 of
msgid ""
"Sends the message `silently <https://telegram.org/blog/channels-2-0"
"#silent-messages>`_. Users will receive a notification with no sound."
msgstr ""

#: aiogram.client.bot.Bot.copy_message:12
#: aiogram.client.bot.Bot.send_animation:15
#: aiogram.client.bot.Bot.send_audio:16 aiogram.client.bot.Bot.send_contact:11
#: aiogram.client.bot.Bot.send_document:13 aiogram.client.bot.Bot.send_game:8
#: aiogram.client.bot.Bot.send_invoice:28
#: aiogram.client.bot.Bot.send_location:13
#: aiogram.client.bot.Bot.send_message:11 aiogram.client.bot.Bot.send_photo:11
#: aiogram.client.bot.Bot.send_poll:19 aiogram.client.bot.Bot.send_sticker:8
#: aiogram.client.bot.Bot.send_venue:15 aiogram.client.bot.Bot.send_video:16
#: aiogram.client.bot.Bot.send_video_note:11
#: aiogram.client.bot.Bot.send_voice:12 of
msgid "Protects the contents of the sent message from forwarding and saving"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:13
#: aiogram.client.bot.Bot.send_animation:16
#: aiogram.client.bot.Bot.send_audio:17 aiogram.client.bot.Bot.send_contact:12
#: aiogram.client.bot.Bot.send_dice:9 aiogram.client.bot.Bot.send_document:14
#: aiogram.client.bot.Bot.send_game:9 aiogram.client.bot.Bot.send_invoice:29
#: aiogram.client.bot.Bot.send_location:14
#: aiogram.client.bot.Bot.send_message:12 aiogram.client.bot.Bot.send_photo:12
#: aiogram.client.bot.Bot.send_poll:20 aiogram.client.bot.Bot.send_sticker:9
#: aiogram.client.bot.Bot.send_venue:16 aiogram.client.bot.Bot.send_video:17
#: aiogram.client.bot.Bot.send_video_note:12
#: aiogram.client.bot.Bot.send_voice:13 of
msgid "If the message is a reply, ID of the original message"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:14
#: aiogram.client.bot.Bot.send_animation:17
#: aiogram.client.bot.Bot.send_audio:18 aiogram.client.bot.Bot.send_contact:13
#: aiogram.client.bot.Bot.send_dice:10 aiogram.client.bot.Bot.send_document:15
#: aiogram.client.bot.Bot.send_game:10 aiogram.client.bot.Bot.send_invoice:30
#: aiogram.client.bot.Bot.send_location:15
#: aiogram.client.bot.Bot.send_media_group:10
#: aiogram.client.bot.Bot.send_message:13 aiogram.client.bot.Bot.send_photo:13
#: aiogram.client.bot.Bot.send_poll:21 aiogram.client.bot.Bot.send_sticker:10
#: aiogram.client.bot.Bot.send_venue:17 aiogram.client.bot.Bot.send_video:18
#: aiogram.client.bot.Bot.send_video_note:13
#: aiogram.client.bot.Bot.send_voice:14 of
msgid ""
"Pass :code:`True` if the message should be sent even if the specified "
"replied-to message is not found"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:15
#: aiogram.client.bot.Bot.send_animation:18
#: aiogram.client.bot.Bot.send_audio:19 aiogram.client.bot.Bot.send_dice:11
#: aiogram.client.bot.Bot.send_document:16
#: aiogram.client.bot.Bot.send_location:16
#: aiogram.client.bot.Bot.send_message:14 aiogram.client.bot.Bot.send_photo:14
#: aiogram.client.bot.Bot.send_poll:22 aiogram.client.bot.Bot.send_sticker:11
#: aiogram.client.bot.Bot.send_venue:18 aiogram.client.bot.Bot.send_video:19
#: aiogram.client.bot.Bot.send_video_note:14
#: aiogram.client.bot.Bot.send_voice:15 of
msgid ""
"Additional interface options. A JSON-serialized object for an `inline "
"keyboard <https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-"
"updating>`_, `custom reply keyboard "
"<https://core.telegram.org/bots#keyboards>`_, instructions to remove "
"reply keyboard or to force a reply from the user."
msgstr ""

#: aiogram.client.bot.Bot.forward_message:11
#: aiogram.client.bot.Bot.send_animation:20
#: aiogram.client.bot.Bot.send_audio:21 aiogram.client.bot.Bot.send_contact:16
#: aiogram.client.bot.Bot.send_dice:13 aiogram.client.bot.Bot.send_document:18
#: aiogram.client.bot.Bot.send_game:13 aiogram.client.bot.Bot.send_invoice:33
#: aiogram.client.bot.Bot.send_location:18
#: aiogram.client.bot.Bot.send_message:16 aiogram.client.bot.Bot.send_photo:16
#: aiogram.client.bot.Bot.send_poll:24 aiogram.client.bot.Bot.send_sticker:13
#: aiogram.client.bot.Bot.send_venue:20 aiogram.client.bot.Bot.send_video:21
#: aiogram.client.bot.Bot.send_video_note:16
#: aiogram.client.bot.Bot.send_voice:17 of
msgid "On success, the sent Message is returned."
msgstr ""

#: aiogram.client.bot.Bot.forward_message:1 of
msgid ""
"Use this method to forward messages of any kind. Service messages can't "
"be forwarded. On success, the sent :class:`aiogram.types.message.Message`"
" is returned."
msgstr ""

#: aiogram.client.bot.Bot.forward_message:3 of
msgid "Source: https://core.telegram.org/bots/api#forwardmessage"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:6
#: aiogram.client.bot.Bot.forward_message:6 of
msgid ""
"Unique identifier for the chat where the original message was sent (or "
"channel username in the format :code:`@channelusername`)"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:7
#: aiogram.client.bot.Bot.forward_message:7 of
msgid "Message identifier in the chat specified in *from_chat_id*"
msgstr ""

#: aiogram.client.bot.Bot.forward_message:9 of
msgid "Protects the contents of the forwarded message from forwarding and saving"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:1 of
msgid ""
"Use this method to copy messages of any kind. Service messages and "
"invoice messages can't be copied. A quiz "
":class:`aiogram.methods.poll.Poll` can be copied only if the value of the"
" field *correct_option_id* is known to the bot. The method is analogous "
"to the method :class:`aiogram.methods.forward_message.ForwardMessage`, "
"but the copied message doesn't have a link to the original message. "
"Returns the :class:`aiogram.types.message_id.MessageId` of the sent "
"message on success."
msgstr ""

#: aiogram.client.bot.Bot.copy_message:3 of
msgid "Source: https://core.telegram.org/bots/api#copymessage"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:8 of
msgid ""
"New caption for media, 0-1024 characters after entities parsing. If not "
"specified, the original caption is kept"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:9 of
msgid ""
"Mode for parsing entities in the new caption. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.client.bot.Bot.copy_message:10 of
msgid ""
"A JSON-serialized list of special entities that appear in the new "
"caption, which can be specified instead of *parse_mode*"
msgstr ""

#: aiogram.client.bot.Bot.copy_message:17 of
msgid "Returns the MessageId of the sent message on success."
msgstr ""

#: aiogram.client.bot.Bot.send_photo:1 of
msgid ""
"Use this method to send photos. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_photo:3 of
msgid "Source: https://core.telegram.org/bots/api#sendphoto"
msgstr ""

#: aiogram.client.bot.Bot.send_photo:6 of
msgid ""
"Photo to send. Pass a file_id as String to send a photo that exists on "
"the Telegram servers (recommended), pass an HTTP URL as a String for "
"Telegram to get a photo from the Internet, or upload a new photo using "
"multipart/form-data. The photo must be at most 10 MB in size. The photo's"
" width and height must not exceed 10000 in total. Width and height ratio "
"must be at most 20. :ref:`More information on Sending Files » <sending-"
"files>`"
msgstr ""

#: aiogram.client.bot.Bot.send_photo:7 of
msgid ""
"Photo caption (may also be used when resending photos by *file_id*), "
"0-1024 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.send_photo:8 of
msgid ""
"Mode for parsing entities in the photo caption. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:10
#: aiogram.client.bot.Bot.send_animation:13
#: aiogram.client.bot.Bot.send_audio:10 aiogram.client.bot.Bot.send_document:10
#: aiogram.client.bot.Bot.send_photo:9 aiogram.client.bot.Bot.send_video:13
#: aiogram.client.bot.Bot.send_voice:9 of
msgid ""
"A JSON-serialized list of special entities that appear in the caption, "
"which can be specified instead of *parse_mode*"
msgstr ""

#: aiogram.client.bot.Bot.send_audio:1 of
msgid ""
"Use this method to send audio files, if you want Telegram clients to "
"display them in the music player. Your audio must be in the .MP3 or .M4A "
"format. On success, the sent :class:`aiogram.types.message.Message` is "
"returned. Bots can currently send audio files of up to 50 MB in size, "
"this limit may be changed in the future. For sending voice messages, use "
"the :class:`aiogram.methods.send_voice.SendVoice` method instead."
msgstr ""

#: aiogram.client.bot.Bot.send_audio:4 of
msgid "Source: https://core.telegram.org/bots/api#sendaudio"
msgstr ""

#: aiogram.client.bot.Bot.send_audio:7 of
msgid ""
"Audio file to send. Pass a file_id as String to send an audio file that "
"exists on the Telegram servers (recommended), pass an HTTP URL as a "
"String for Telegram to get an audio file from the Internet, or upload a "
"new one using multipart/form-data. :ref:`More information on Sending "
"Files » <sending-files>`"
msgstr ""

#: aiogram.client.bot.Bot.send_audio:8 of
msgid "Audio caption, 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.send_audio:9 of
msgid ""
"Mode for parsing entities in the audio caption. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.client.bot.Bot.send_audio:11 of
msgid "Duration of the audio in seconds"
msgstr ""

#: aiogram.client.bot.Bot.send_audio:12 of
msgid "Performer"
msgstr ""

#: aiogram.client.bot.Bot.send_audio:13 of
msgid "Track name"
msgstr ""

#: aiogram.client.bot.Bot.send_animation:10
#: aiogram.client.bot.Bot.send_audio:14 aiogram.client.bot.Bot.send_document:7
#: aiogram.client.bot.Bot.send_video:10
#: aiogram.client.bot.Bot.send_video_note:9 of
msgid ""
"Thumbnail of the file sent; can be ignored if thumbnail generation for "
"the file is supported server-side. The thumbnail should be in JPEG format"
" and less than 200 kB in size. A thumbnail's width and height should not "
"exceed 320. Ignored if the file is not uploaded using multipart/form-"
"data. Thumbnails can't be reused and can be only uploaded as a new file, "
"so you can pass 'attach://<file_attach_name>' if the thumbnail was "
"uploaded using multipart/form-data under <file_attach_name>. :ref:`More "
"information on Sending Files » <sending-files>`"
msgstr ""

#: aiogram.client.bot.Bot.send_document:1 of
msgid ""
"Use this method to send general files. On success, the sent "
":class:`aiogram.types.message.Message` is returned. Bots can currently "
"send files of any type of up to 50 MB in size, this limit may be changed "
"in the future."
msgstr ""

#: aiogram.client.bot.Bot.send_document:3 of
msgid "Source: https://core.telegram.org/bots/api#senddocument"
msgstr ""

#: aiogram.client.bot.Bot.send_document:6 of
msgid ""
"File to send. Pass a file_id as String to send a file that exists on the "
"Telegram servers (recommended), pass an HTTP URL as a String for Telegram"
" to get a file from the Internet, or upload a new one using multipart"
"/form-data. :ref:`More information on Sending Files » <sending-files>`"
msgstr ""

#: aiogram.client.bot.Bot.send_document:8 of
msgid ""
"Document caption (may also be used when resending documents by "
"*file_id*), 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.send_document:9 of
msgid ""
"Mode for parsing entities in the document caption. See `formatting "
"options <https://core.telegram.org/bots/api#formatting-options>`_ for "
"more details."
msgstr ""

#: aiogram.client.bot.Bot.send_document:11 of
msgid ""
"Disables automatic server-side content type detection for files uploaded "
"using multipart/form-data"
msgstr ""

#: aiogram.client.bot.Bot.send_video:1 of
msgid ""
"Use this method to send video files, Telegram clients support MPEG4 "
"videos (other formats may be sent as "
":class:`aiogram.types.document.Document`). On success, the sent "
":class:`aiogram.types.message.Message` is returned. Bots can currently "
"send video files of up to 50 MB in size, this limit may be changed in the"
" future."
msgstr ""

#: aiogram.client.bot.Bot.send_video:3 of
msgid "Source: https://core.telegram.org/bots/api#sendvideo"
msgstr ""

#: aiogram.client.bot.Bot.send_video:6 of
msgid ""
"Video to send. Pass a file_id as String to send a video that exists on "
"the Telegram servers (recommended), pass an HTTP URL as a String for "
"Telegram to get a video from the Internet, or upload a new video using "
"multipart/form-data. :ref:`More information on Sending Files » <sending-"
"files>`"
msgstr ""

#: aiogram.client.bot.Bot.send_video:7 aiogram.client.bot.Bot.send_video_note:7
#: of
msgid "Duration of sent video in seconds"
msgstr ""

#: aiogram.client.bot.Bot.send_video:8 of
msgid "Video width"
msgstr ""

#: aiogram.client.bot.Bot.send_video:9 of
msgid "Video height"
msgstr ""

#: aiogram.client.bot.Bot.send_video:11 of
msgid ""
"Video caption (may also be used when resending videos by *file_id*), "
"0-1024 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.send_video:12 of
msgid ""
"Mode for parsing entities in the video caption. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.client.bot.Bot.send_video:14 of
msgid "Pass :code:`True` if the uploaded video is suitable for streaming"
msgstr ""

#: aiogram.client.bot.Bot.send_animation:1 of
msgid ""
"Use this method to send animation files (GIF or H.264/MPEG-4 AVC video "
"without sound). On success, the sent "
":class:`aiogram.types.message.Message` is returned. Bots can currently "
"send animation files of up to 50 MB in size, this limit may be changed in"
" the future."
msgstr ""

#: aiogram.client.bot.Bot.send_animation:3 of
msgid "Source: https://core.telegram.org/bots/api#sendanimation"
msgstr ""

#: aiogram.client.bot.Bot.send_animation:6 of
msgid ""
"Animation to send. Pass a file_id as String to send an animation that "
"exists on the Telegram servers (recommended), pass an HTTP URL as a "
"String for Telegram to get an animation from the Internet, or upload a "
"new animation using multipart/form-data. :ref:`More information on "
"Sending Files » <sending-files>`"
msgstr ""

#: aiogram.client.bot.Bot.send_animation:7 of
msgid "Duration of sent animation in seconds"
msgstr ""

#: aiogram.client.bot.Bot.send_animation:8 of
msgid "Animation width"
msgstr ""

#: aiogram.client.bot.Bot.send_animation:9 of
msgid "Animation height"
msgstr ""

#: aiogram.client.bot.Bot.send_animation:11 of
msgid ""
"Animation caption (may also be used when resending animation by "
"*file_id*), 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.send_animation:12 of
msgid ""
"Mode for parsing entities in the animation caption. See `formatting "
"options <https://core.telegram.org/bots/api#formatting-options>`_ for "
"more details."
msgstr ""

#: aiogram.client.bot.Bot.send_voice:1 of
msgid ""
"Use this method to send audio files, if you want Telegram clients to "
"display the file as a playable voice message. For this to work, your "
"audio must be in an .OGG file encoded with OPUS (other formats may be "
"sent as :class:`aiogram.types.audio.Audio` or "
":class:`aiogram.types.document.Document`). On success, the sent "
":class:`aiogram.types.message.Message` is returned. Bots can currently "
"send voice messages of up to 50 MB in size, this limit may be changed in "
"the future."
msgstr ""

#: aiogram.client.bot.Bot.send_voice:3 of
msgid "Source: https://core.telegram.org/bots/api#sendvoice"
msgstr ""

#: aiogram.client.bot.Bot.send_voice:6 of
msgid ""
"Audio file to send. Pass a file_id as String to send a file that exists "
"on the Telegram servers (recommended), pass an HTTP URL as a String for "
"Telegram to get a file from the Internet, or upload a new one using "
"multipart/form-data. :ref:`More information on Sending Files » <sending-"
"files>`"
msgstr ""

#: aiogram.client.bot.Bot.send_voice:7 of
msgid "Voice message caption, 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.send_voice:8 of
msgid ""
"Mode for parsing entities in the voice message caption. See `formatting "
"options <https://core.telegram.org/bots/api#formatting-options>`_ for "
"more details."
msgstr ""

#: aiogram.client.bot.Bot.send_voice:10 of
msgid "Duration of the voice message in seconds"
msgstr ""

#: aiogram.client.bot.Bot.send_video_note:1 of
msgid ""
"As of `v.4.0 <https://telegram.org/blog/video-messages-and-telescope>`_, "
"Telegram clients support rounded square MPEG4 videos of up to 1 minute "
"long. Use this method to send video messages. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_video_note:3 of
msgid "Source: https://core.telegram.org/bots/api#sendvideonote"
msgstr ""

#: aiogram.client.bot.Bot.send_video_note:6 of
msgid ""
"Video note to send. Pass a file_id as String to send a video note that "
"exists on the Telegram servers (recommended) or upload a new video using "
"multipart/form-data. :ref:`More information on Sending Files » <sending-"
"files>`. Sending video notes by a URL is currently unsupported"
msgstr ""

#: aiogram.client.bot.Bot.send_video_note:8 of
msgid "Video width and height, i.e. diameter of the video message"
msgstr ""

#: aiogram.client.bot.Bot.send_media_group:1 of
msgid ""
"Use this method to send a group of photos, videos, documents or audios as"
" an album. Documents and audio files can be only grouped in an album with"
" messages of the same type. On success, an array of `Messages "
"<https://core.telegram.org/bots/api#message>`_ that were sent is "
"returned."
msgstr ""

#: aiogram.client.bot.Bot.send_media_group:3 of
msgid "Source: https://core.telegram.org/bots/api#sendmediagroup"
msgstr ""

#: aiogram.client.bot.Bot.send_media_group:6 of
msgid ""
"A JSON-serialized array describing messages to be sent, must include 2-10"
" items"
msgstr ""

#: aiogram.client.bot.Bot.send_media_group:7 of
msgid ""
"Sends messages `silently <https://telegram.org/blog/channels-2-0#silent-"
"messages>`_. Users will receive a notification with no sound."
msgstr ""

#: aiogram.client.bot.Bot.send_media_group:8 of
msgid "Protects the contents of the sent messages from forwarding and saving"
msgstr ""

#: aiogram.client.bot.Bot.send_media_group:9 of
msgid "If the messages are a reply, ID of the original message"
msgstr ""

#: aiogram.client.bot.Bot.send_media_group:12 of
msgid "On success, an array of Messages that were sent is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_location:1 of
msgid ""
"Use this method to send point on the map. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_location:3 of
msgid "Source: https://core.telegram.org/bots/api#sendlocation"
msgstr ""

#: aiogram.client.bot.Bot.send_location:6 of
msgid "Latitude of the location"
msgstr ""

#: aiogram.client.bot.Bot.send_location:7 of
msgid "Longitude of the location"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_live_location:10
#: aiogram.client.bot.Bot.send_location:8 of
msgid "The radius of uncertainty for the location, measured in meters; 0-1500"
msgstr ""

#: aiogram.client.bot.Bot.send_location:9 of
msgid ""
"Period in seconds for which the location will be updated (see `Live "
"Locations <https://telegram.org/blog/live-locations>`_, should be between"
" 60 and 86400."
msgstr ""

#: aiogram.client.bot.Bot.send_location:10 of
msgid ""
"For live locations, a direction in which the user is moving, in degrees. "
"Must be between 1 and 360 if specified."
msgstr ""

#: aiogram.client.bot.Bot.send_location:11 of
msgid ""
"For live locations, a maximum distance for proximity alerts about "
"approaching another chat member, in meters. Must be between 1 and 100000 "
"if specified."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_live_location:1 of
msgid ""
"Use this method to edit live location messages. A location can be edited "
"until its *live_period* expires or editing is explicitly disabled by a "
"call to "
":class:`aiogram.methods.stop_message_live_location.StopMessageLiveLocation`."
" On success, if the edited message is not an inline message, the edited "
":class:`aiogram.types.message.Message` is returned, otherwise "
":code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_live_location:3 of
msgid "Source: https://core.telegram.org/bots/api#editmessagelivelocation"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_live_location:5 of
msgid "Latitude of new location"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_live_location:6 of
msgid "Longitude of new location"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:5
#: aiogram.client.bot.Bot.edit_message_live_location:7
#: aiogram.client.bot.Bot.edit_message_media:6
#: aiogram.client.bot.Bot.edit_message_reply_markup:5
#: aiogram.client.bot.Bot.edit_message_text:6
#: aiogram.client.bot.Bot.stop_message_live_location:5 of
msgid ""
"Required if *inline_message_id* is not specified. Unique identifier for "
"the target chat or username of the target channel (in the format "
":code:`@channelusername`)"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:6
#: aiogram.client.bot.Bot.edit_message_live_location:8
#: aiogram.client.bot.Bot.edit_message_media:7
#: aiogram.client.bot.Bot.edit_message_reply_markup:6
#: aiogram.client.bot.Bot.edit_message_text:7 of
msgid ""
"Required if *inline_message_id* is not specified. Identifier of the "
"message to edit"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:7
#: aiogram.client.bot.Bot.edit_message_live_location:9
#: aiogram.client.bot.Bot.edit_message_media:8
#: aiogram.client.bot.Bot.edit_message_reply_markup:7
#: aiogram.client.bot.Bot.edit_message_text:8
#: aiogram.client.bot.Bot.get_game_high_scores:10
#: aiogram.client.bot.Bot.set_game_score:11
#: aiogram.client.bot.Bot.stop_message_live_location:7 of
msgid ""
"Required if *chat_id* and *message_id* are not specified. Identifier of "
"the inline message"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_live_location:11 of
msgid ""
"Direction in which the user is moving, in degrees. Must be between 1 and "
"360 if specified."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_live_location:12 of
msgid ""
"The maximum distance for proximity alerts about approaching another chat "
"member, in meters. Must be between 1 and 100000 if specified."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_live_location:13
#: aiogram.client.bot.Bot.edit_message_media:9
#: aiogram.client.bot.Bot.stop_message_live_location:8 of
msgid ""
"A JSON-serialized object for a new `inline keyboard "
"<https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-"
"updating>`_."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:13
#: aiogram.client.bot.Bot.edit_message_live_location:15
#: aiogram.client.bot.Bot.edit_message_media:11
#: aiogram.client.bot.Bot.edit_message_reply_markup:10
#: aiogram.client.bot.Bot.edit_message_text:14 of
msgid ""
"On success, if the edited message is not an inline message, the edited "
"Message is returned, otherwise True is returned."
msgstr ""

#: aiogram.client.bot.Bot.stop_message_live_location:1 of
msgid ""
"Use this method to stop updating a live location message before "
"*live_period* expires. On success, if the message is not an inline "
"message, the edited :class:`aiogram.types.message.Message` is returned, "
"otherwise :code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.stop_message_live_location:3 of
msgid "Source: https://core.telegram.org/bots/api#stopmessagelivelocation"
msgstr ""

#: aiogram.client.bot.Bot.stop_message_live_location:6 of
msgid ""
"Required if *inline_message_id* is not specified. Identifier of the "
"message with live location to stop"
msgstr ""

#: aiogram.client.bot.Bot.stop_message_live_location:10 of
msgid ""
"On success, if the message is not an inline message, the edited Message "
"is returned, otherwise True is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_venue:1 of
msgid ""
"Use this method to send information about a venue. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_venue:3 of
msgid "Source: https://core.telegram.org/bots/api#sendvenue"
msgstr ""

#: aiogram.client.bot.Bot.send_venue:6 of
msgid "Latitude of the venue"
msgstr ""

#: aiogram.client.bot.Bot.send_venue:7 of
msgid "Longitude of the venue"
msgstr ""

#: aiogram.client.bot.Bot.send_venue:8 of
msgid "Name of the venue"
msgstr ""

#: aiogram.client.bot.Bot.send_venue:9 of
msgid "Address of the venue"
msgstr ""

#: aiogram.client.bot.Bot.send_venue:10 of
msgid "Foursquare identifier of the venue"
msgstr ""

#: aiogram.client.bot.Bot.send_venue:11 of
msgid ""
"Foursquare type of the venue, if known. (For example, "
"'arts_entertainment/default', 'arts_entertainment/aquarium' or "
"'food/icecream'.)"
msgstr ""

#: aiogram.client.bot.Bot.send_venue:12 of
msgid "Google Places identifier of the venue"
msgstr ""

#: aiogram.client.bot.Bot.send_venue:13 of
msgid ""
"Google Places type of the venue. (See `supported types "
"<https://developers.google.com/places/web-service/supported_types>`_.)"
msgstr ""

#: aiogram.client.bot.Bot.send_contact:1 of
msgid ""
"Use this method to send phone contacts. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_contact:3 of
msgid "Source: https://core.telegram.org/bots/api#sendcontact"
msgstr ""

#: aiogram.client.bot.Bot.send_contact:6 of
msgid "Contact's phone number"
msgstr ""

#: aiogram.client.bot.Bot.send_contact:7 of
msgid "Contact's first name"
msgstr ""

#: aiogram.client.bot.Bot.send_contact:8 of
msgid "Contact's last name"
msgstr ""

#: aiogram.client.bot.Bot.send_contact:9 of
msgid ""
"Additional data about the contact in the form of a `vCard "
"<https://en.wikipedia.org/wiki/VCard>`_, 0-2048 bytes"
msgstr ""

#: aiogram.client.bot.Bot.send_contact:14 of
msgid ""
"Additional interface options. A JSON-serialized object for an `inline "
"keyboard <https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-"
"updating>`_, `custom reply keyboard "
"<https://core.telegram.org/bots#keyboards>`_, instructions to remove "
"keyboard or to force a reply from the user."
msgstr ""

#: aiogram.client.bot.Bot.send_poll:1 of
msgid ""
"Use this method to send a native poll. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_poll:3 of
msgid "Source: https://core.telegram.org/bots/api#sendpoll"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:6 of
msgid "Poll question, 1-300 characters"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:7 of
msgid ""
"A JSON-serialized list of answer options, 2-10 strings 1-100 characters "
"each"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:8 of
msgid ":code:`True`, if the poll needs to be anonymous, defaults to :code:`True`"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:9 of
msgid "Poll type, 'quiz' or 'regular', defaults to 'regular'"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:10 of
msgid ""
":code:`True`, if the poll allows multiple answers, ignored for polls in "
"quiz mode, defaults to :code:`False`"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:11 of
msgid ""
"0-based identifier of the correct answer option, required for polls in "
"quiz mode"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:12 of
msgid ""
"Text that is shown when a user chooses an incorrect answer or taps on the"
" lamp icon in a quiz-style poll, 0-200 characters with at most 2 line "
"feeds after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:13 of
msgid ""
"Mode for parsing entities in the explanation. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.client.bot.Bot.send_poll:14 of
msgid ""
"A JSON-serialized list of special entities that appear in the poll "
"explanation, which can be specified instead of *parse_mode*"
msgstr ""

#: aiogram.client.bot.Bot.send_poll:15 of
msgid ""
"Amount of time in seconds the poll will be active after creation, 5-600. "
"Can't be used together with *close_date*."
msgstr ""

#: aiogram.client.bot.Bot.send_poll:16 of
msgid ""
"Point in time (Unix timestamp) when the poll will be automatically "
"closed. Must be at least 5 and no more than 600 seconds in the future. "
"Can't be used together with *open_period*."
msgstr ""

#: aiogram.client.bot.Bot.send_poll:17 of
msgid ""
"Pass :code:`True` if the poll needs to be immediately closed. This can be"
" useful for poll preview."
msgstr ""

#: aiogram.client.bot.Bot.send_dice:1 of
msgid ""
"Use this method to send an animated emoji that will display a random "
"value. On success, the sent :class:`aiogram.types.message.Message` is "
"returned."
msgstr ""

#: aiogram.client.bot.Bot.send_dice:3 of
msgid "Source: https://core.telegram.org/bots/api#senddice"
msgstr ""

#: aiogram.client.bot.Bot.send_dice:6 of
msgid ""
"Emoji on which the dice throw animation is based. Currently, must be one "
"of '🎲', '🎯', '🏀', '⚽', '🎳', or '🎰'. Dice can have values 1-6 for '🎲', '🎯'"
" and '🎳', values 1-5 for '🏀' and '⚽', and values 1-64 for '🎰'. Defaults "
"to '🎲'"
msgstr ""

#: aiogram.client.bot.Bot.send_dice:8 of
msgid "Protects the contents of the sent message from forwarding"
msgstr ""

#: aiogram.client.bot.Bot.send_chat_action:1 of
msgid ""
"Use this method when you need to tell the user that something is "
"happening on the bot's side. The status is set for 5 seconds or less "
"(when a message arrives from your bot, Telegram clients clear its typing "
"status). Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.send_chat_action:3 of
msgid ""
"Example: The `ImageBot <https://t.me/imagebot>`_ needs some time to "
"process a request and upload the image. Instead of sending a text message"
" along the lines of 'Retrieving image, please wait…', the bot may use "
":class:`aiogram.methods.send_chat_action.SendChatAction` with *action* = "
"*upload_photo*. The user will see a 'sending photo' status for the bot."
msgstr ""

#: aiogram.client.bot.Bot.send_chat_action:5 of
msgid ""
"We only recommend using this method when a response from the bot will "
"take a **noticeable** amount of time to arrive."
msgstr ""

#: aiogram.client.bot.Bot.send_chat_action:7 of
msgid "Source: https://core.telegram.org/bots/api#sendchataction"
msgstr ""

#: aiogram.client.bot.Bot.send_chat_action:10 of
msgid ""
"Type of action to broadcast. Choose one, depending on what the user is "
"about to receive: *typing* for `text messages "
"<https://core.telegram.org/bots/api#sendmessage>`_, *upload_photo* for "
"`photos <https://core.telegram.org/bots/api#sendphoto>`_, *record_video* "
"or *upload_video* for `videos "
"<https://core.telegram.org/bots/api#sendvideo>`_, *record_voice* or "
"*upload_voice* for `voice notes "
"<https://core.telegram.org/bots/api#sendvoice>`_, *upload_document* for "
"`general files <https://core.telegram.org/bots/api#senddocument>`_, "
"*choose_sticker* for `stickers "
"<https://core.telegram.org/bots/api#sendsticker>`_, *find_location* for "
"`location data <https://core.telegram.org/bots/api#sendlocation>`_, "
"*record_video_note* or *upload_video_note* for `video notes "
"<https://core.telegram.org/bots/api#sendvideonote>`_."
msgstr ""

#: aiogram.client.bot.Bot.get_user_profile_photos:1 of
msgid ""
"Use this method to get a list of profile pictures for a user. Returns a "
":class:`aiogram.types.user_profile_photos.UserProfilePhotos` object."
msgstr ""

#: aiogram.client.bot.Bot.get_user_profile_photos:3 of
msgid "Source: https://core.telegram.org/bots/api#getuserprofilephotos"
msgstr ""

#: aiogram.client.bot.Bot.approve_chat_join_request:6
#: aiogram.client.bot.Bot.ban_chat_member:6
#: aiogram.client.bot.Bot.decline_chat_join_request:6
#: aiogram.client.bot.Bot.get_chat_member:6
#: aiogram.client.bot.Bot.get_user_profile_photos:5
#: aiogram.client.bot.Bot.kick_chat_member:10
#: aiogram.client.bot.Bot.promote_chat_member:6
#: aiogram.client.bot.Bot.restrict_chat_member:6
#: aiogram.client.bot.Bot.set_chat_administrator_custom_title:6
#: aiogram.client.bot.Bot.unban_chat_member:6 of
msgid "Unique identifier of the target user"
msgstr ""

#: aiogram.client.bot.Bot.get_user_profile_photos:6 of
msgid ""
"Sequential number of the first photo to be returned. By default, all "
"photos are returned."
msgstr ""

#: aiogram.client.bot.Bot.get_user_profile_photos:7 of
msgid ""
"Limits the number of photos to be retrieved. Values between 1-100 are "
"accepted. Defaults to 100."
msgstr ""

#: aiogram.client.bot.Bot.get_user_profile_photos:9 of
msgid "Returns a UserProfilePhotos object."
msgstr ""

#: aiogram.client.bot.Bot.get_file:1 of
msgid ""
"Use this method to get basic information about a file and prepare it for "
"downloading. For the moment, bots can download files of up to 20MB in "
"size. On success, a :class:`aiogram.types.file.File` object is returned. "
"The file can then be downloaded via the link "
":code:`https://api.telegram.org/file/bot<token>/<file_path>`, where "
":code:`<file_path>` is taken from the response. It is guaranteed that the"
" link will be valid for at least 1 hour. When the link expires, a new one"
" can be requested by calling :class:`aiogram.methods.get_file.GetFile` "
"again. **Note:** This function may not preserve the original file name "
"and MIME type. You should save the file's MIME type and name (if "
"available) when the File object is received."
msgstr ""

#: aiogram.client.bot.Bot.get_file:4 of
msgid "Source: https://core.telegram.org/bots/api#getfile"
msgstr ""

#: aiogram.client.bot.Bot.get_file:6 of
msgid "File identifier to get information about"
msgstr ""

#: aiogram.client.bot.Bot.get_file:8 of
msgid "On success, a File object is returned."
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_member:1
#: aiogram.client.bot.Bot.kick_chat_member:5 of
msgid ""
"Use this method to ban a user in a group, a supergroup or a channel. In "
"the case of supergroups and channels, the user will not be able to return"
" to the chat on their own using invite links, etc., unless `unbanned "
"<https://core.telegram.org/bots/api#unbanchatmember>`_ first. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_member:3
#: aiogram.client.bot.Bot.kick_chat_member:7 of
msgid "Source: https://core.telegram.org/bots/api#banchatmember"
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_member:5
#: aiogram.client.bot.Bot.kick_chat_member:9
#: aiogram.client.bot.Bot.unban_chat_member:5 of
msgid ""
"Unique identifier for the target group or username of the target "
"supergroup or channel (in the format :code:`@channelusername`)"
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_member:7
#: aiogram.client.bot.Bot.kick_chat_member:11 of
msgid ""
"Date when the user will be unbanned, unix time. If user is banned for "
"more than 366 days or less than 30 seconds from the current time they are"
" considered to be banned forever. Applied for supergroups and channels "
"only."
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_member:8
#: aiogram.client.bot.Bot.kick_chat_member:12 of
msgid ""
"Pass :code:`True` to delete all messages from the chat for the user that "
"is being removed. If :code:`False`, the user will be able to see messages"
" in the group that were sent before the user was removed. Always "
":code:`True` for supergroups and channels."
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_member:10
#: aiogram.client.bot.Bot.kick_chat_member:14 of
msgid ""
"In the case of supergroups and channels, the user will not be able to "
"return to the chat on their own using invite links, etc. Returns True on "
"success."
msgstr ""

#: aiogram.client.bot.Bot.unban_chat_member:1 of
msgid ""
"Use this method to unban a previously banned user in a supergroup or "
"channel. The user will **not** return to the group or channel "
"automatically, but will be able to join via link, etc. The bot must be an"
" administrator for this to work. By default, this method guarantees that "
"after the call the user is not a member of the chat, but will be able to "
"join it. So if the user is a member of the chat they will also be "
"**removed** from the chat. If you don't want this, use the parameter "
"*only_if_banned*. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.unban_chat_member:3 of
msgid "Source: https://core.telegram.org/bots/api#unbanchatmember"
msgstr ""

#: aiogram.client.bot.Bot.unban_chat_member:7 of
msgid "Do nothing if the user is not banned"
msgstr ""

#: aiogram.client.bot.Bot.unban_chat_member:9 of
msgid ""
"The user will not return to the group or channel automatically, but will "
"be able to join via link, etc. Returns True on success."
msgstr ""

#: aiogram.client.bot.Bot.restrict_chat_member:1 of
msgid ""
"Use this method to restrict a user in a supergroup. The bot must be an "
"administrator in the supergroup for this to work and must have the "
"appropriate administrator rights. Pass :code:`True` for all permissions "
"to lift restrictions from a user. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.restrict_chat_member:3 of
msgid "Source: https://core.telegram.org/bots/api#restrictchatmember"
msgstr ""

#: aiogram.client.bot.Bot.delete_chat_sticker_set:5
#: aiogram.client.bot.Bot.restrict_chat_member:5
#: aiogram.client.bot.Bot.set_chat_administrator_custom_title:5
#: aiogram.client.bot.Bot.set_chat_permissions:5
#: aiogram.client.bot.Bot.set_chat_sticker_set:5 of
msgid ""
"Unique identifier for the target chat or username of the target "
"supergroup (in the format :code:`@supergroupusername`)"
msgstr ""

#: aiogram.client.bot.Bot.restrict_chat_member:7 of
msgid "A JSON-serialized object for new user permissions"
msgstr ""

#: aiogram.client.bot.Bot.restrict_chat_member:8 of
msgid ""
"Date when restrictions will be lifted for the user, unix time. If user is"
" restricted for more than 366 days or less than 30 seconds from the "
"current time, they are considered to be restricted forever"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:1 of
msgid ""
"Use this method to promote or demote a user in a supergroup or a channel."
" The bot must be an administrator in the chat for this to work and must "
"have the appropriate administrator rights. Pass :code:`False` for all "
"boolean parameters to demote a user. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:3 of
msgid "Source: https://core.telegram.org/bots/api#promotechatmember"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:7 of
msgid "Pass :code:`True` if the administrator's presence in the chat is hidden"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:8 of
msgid ""
"Pass :code:`True` if the administrator can access the chat event log, "
"chat statistics, message statistics in channels, see channel members, see"
" anonymous administrators in supergroups and ignore slow mode. Implied by"
" any other administrator privilege"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:9 of
msgid ""
"Pass :code:`True` if the administrator can create channel posts, channels"
" only"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:10 of
msgid ""
"Pass :code:`True` if the administrator can edit messages of other users "
"and can pin messages, channels only"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:11 of
msgid "Pass :code:`True` if the administrator can delete messages of other users"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:12 of
msgid "Pass :code:`True` if the administrator can manage video chats"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:13 of
msgid ""
"Pass :code:`True` if the administrator can restrict, ban or unban chat "
"members"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:14 of
msgid ""
"Pass :code:`True` if the administrator can add new administrators with a "
"subset of their own privileges or demote administrators that he has "
"promoted, directly or indirectly (promoted by administrators that were "
"appointed by him)"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:15 of
msgid ""
"Pass :code:`True` if the administrator can change chat title, photo and "
"other settings"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:16 of
msgid "Pass :code:`True` if the administrator can invite new users to the chat"
msgstr ""

#: aiogram.client.bot.Bot.promote_chat_member:17 of
msgid "Pass :code:`True` if the administrator can pin messages, supergroups only"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_administrator_custom_title:1 of
msgid ""
"Use this method to set a custom title for an administrator in a "
"supergroup promoted by the bot. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_administrator_custom_title:3 of
msgid "Source: https://core.telegram.org/bots/api#setchatadministratorcustomtitle"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_administrator_custom_title:7 of
msgid ""
"New custom title for the administrator; 0-16 characters, emoji are not "
"allowed"
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_sender_chat:1 of
msgid ""
"Use this method to ban a channel chat in a supergroup or a channel. Until"
" the chat is `unbanned "
"<https://core.telegram.org/bots/api#unbanchatsenderchat>`_, the owner of "
"the banned chat won't be able to send messages on behalf of **any of "
"their channels**. The bot must be an administrator in the supergroup or "
"channel for this to work and must have the appropriate administrator "
"rights. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_sender_chat:3 of
msgid "Source: https://core.telegram.org/bots/api#banchatsenderchat"
msgstr ""

#: aiogram.client.bot.Bot.ban_chat_sender_chat:6
#: aiogram.client.bot.Bot.unban_chat_sender_chat:6 of
msgid "Unique identifier of the target sender chat"
msgstr ""

#: aiogram.client.bot.Bot.unban_chat_sender_chat:1 of
msgid ""
"Use this method to unban a previously banned channel chat in a supergroup"
" or channel. The bot must be an administrator for this to work and must "
"have the appropriate administrator rights. Returns :code:`True` on "
"success."
msgstr ""

#: aiogram.client.bot.Bot.unban_chat_sender_chat:3 of
msgid "Source: https://core.telegram.org/bots/api#unbanchatsenderchat"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_permissions:1 of
msgid ""
"Use this method to set default chat permissions for all members. The bot "
"must be an administrator in the group or a supergroup for this to work "
"and must have the *can_restrict_members* administrator rights. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_permissions:3 of
msgid "Source: https://core.telegram.org/bots/api#setchatpermissions"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_permissions:6 of
msgid "A JSON-serialized object for new default chat permissions"
msgstr ""

#: aiogram.client.bot.Bot.export_chat_invite_link:1 of
msgid ""
"Use this method to generate a new primary invite link for a chat; any "
"previously generated primary link is revoked. The bot must be an "
"administrator in the chat for this to work and must have the appropriate "
"administrator rights. Returns the new invite link as *String* on success."
msgstr ""

#: aiogram.client.bot.Bot.export_chat_invite_link:3 of
msgid ""
"Note: Each administrator in a chat generates their own invite links. Bots"
" can't use invite links generated by other administrators. If you want "
"your bot to work with invite links, it will need to generate its own link"
" using "
":class:`aiogram.methods.export_chat_invite_link.ExportChatInviteLink` or "
"by calling the :class:`aiogram.methods.get_chat.GetChat` method. If your "
"bot needs to generate a new primary invite link replacing its previous "
"one, use "
":class:`aiogram.methods.export_chat_invite_link.ExportChatInviteLink` "
"again."
msgstr ""

#: aiogram.client.bot.Bot.export_chat_invite_link:5 of
msgid "Source: https://core.telegram.org/bots/api#exportchatinvitelink"
msgstr ""

#: aiogram.client.bot.Bot.export_chat_invite_link:9 of
msgid "Returns the new invite link as String on success."
msgstr ""

#: aiogram.client.bot.Bot.create_chat_invite_link:1 of
msgid ""
"Use this method to create an additional invite link for a chat. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. The link can be revoked using the "
"method "
":class:`aiogram.methods.revoke_chat_invite_link.RevokeChatInviteLink`. "
"Returns the new invite link as "
":class:`aiogram.types.chat_invite_link.ChatInviteLink` object."
msgstr ""

#: aiogram.client.bot.Bot.create_chat_invite_link:3 of
msgid "Source: https://core.telegram.org/bots/api#createchatinvitelink"
msgstr ""

#: aiogram.client.bot.Bot.create_chat_invite_link:6
#: aiogram.client.bot.Bot.edit_chat_invite_link:7 of
msgid "Invite link name; 0-32 characters"
msgstr ""

#: aiogram.client.bot.Bot.create_chat_invite_link:7
#: aiogram.client.bot.Bot.edit_chat_invite_link:8 of
msgid "Point in time (Unix timestamp) when the link will expire"
msgstr ""

#: aiogram.client.bot.Bot.create_chat_invite_link:8
#: aiogram.client.bot.Bot.edit_chat_invite_link:9 of
msgid ""
"The maximum number of users that can be members of the chat "
"simultaneously after joining the chat via this invite link; 1-99999"
msgstr ""

#: aiogram.client.bot.Bot.create_chat_invite_link:9
#: aiogram.client.bot.Bot.edit_chat_invite_link:10 of
msgid ""
":code:`True`, if users joining the chat via the link need to be approved "
"by chat administrators. If :code:`True`, *member_limit* can't be "
"specified"
msgstr ""

#: aiogram.client.bot.Bot.create_chat_invite_link:11 of
msgid "Returns the new invite link as ChatInviteLink object."
msgstr ""

#: aiogram.client.bot.Bot.edit_chat_invite_link:1 of
msgid ""
"Use this method to edit a non-primary invite link created by the bot. The"
" bot must be an administrator in the chat for this to work and must have "
"the appropriate administrator rights. Returns the edited invite link as a"
" :class:`aiogram.types.chat_invite_link.ChatInviteLink` object."
msgstr ""

#: aiogram.client.bot.Bot.edit_chat_invite_link:3 of
msgid "Source: https://core.telegram.org/bots/api#editchatinvitelink"
msgstr ""

#: aiogram.client.bot.Bot.edit_chat_invite_link:6 of
msgid "The invite link to edit"
msgstr ""

#: aiogram.client.bot.Bot.edit_chat_invite_link:12 of
msgid "Returns the edited invite link as a ChatInviteLink object."
msgstr ""

#: aiogram.client.bot.Bot.revoke_chat_invite_link:1 of
msgid ""
"Use this method to revoke an invite link created by the bot. If the "
"primary link is revoked, a new link is automatically generated. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. Returns the revoked invite link as "
":class:`aiogram.types.chat_invite_link.ChatInviteLink` object."
msgstr ""

#: aiogram.client.bot.Bot.revoke_chat_invite_link:3 of
msgid "Source: https://core.telegram.org/bots/api#revokechatinvitelink"
msgstr ""

#: aiogram.client.bot.Bot.revoke_chat_invite_link:5 of
msgid ""
"Unique identifier of the target chat or username of the target channel "
"(in the format :code:`@channelusername`)"
msgstr ""

#: aiogram.client.bot.Bot.revoke_chat_invite_link:6 of
msgid "The invite link to revoke"
msgstr ""

#: aiogram.client.bot.Bot.revoke_chat_invite_link:8 of
msgid "Returns the revoked invite link as ChatInviteLink object."
msgstr ""

#: aiogram.client.bot.Bot.approve_chat_join_request:1 of
msgid ""
"Use this method to approve a chat join request. The bot must be an "
"administrator in the chat for this to work and must have the "
"*can_invite_users* administrator right. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.approve_chat_join_request:3 of
msgid "Source: https://core.telegram.org/bots/api#approvechatjoinrequest"
msgstr ""

#: aiogram.client.bot.Bot.decline_chat_join_request:1 of
msgid ""
"Use this method to decline a chat join request. The bot must be an "
"administrator in the chat for this to work and must have the "
"*can_invite_users* administrator right. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.decline_chat_join_request:3 of
msgid "Source: https://core.telegram.org/bots/api#declinechatjoinrequest"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_photo:1 of
msgid ""
"Use this method to set a new profile photo for the chat. Photos can't be "
"changed for private chats. The bot must be an administrator in the chat "
"for this to work and must have the appropriate administrator rights. "
"Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_photo:3 of
msgid "Source: https://core.telegram.org/bots/api#setchatphoto"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_photo:6 of
msgid "New chat photo, uploaded using multipart/form-data"
msgstr ""

#: aiogram.client.bot.Bot.delete_chat_photo:1 of
msgid ""
"Use this method to delete a chat photo. Photos can't be changed for "
"private chats. The bot must be an administrator in the chat for this to "
"work and must have the appropriate administrator rights. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.delete_chat_photo:3 of
msgid "Source: https://core.telegram.org/bots/api#deletechatphoto"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_title:1 of
msgid ""
"Use this method to change the title of a chat. Titles can't be changed "
"for private chats. The bot must be an administrator in the chat for this "
"to work and must have the appropriate administrator rights. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_title:3 of
msgid "Source: https://core.telegram.org/bots/api#setchattitle"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_title:6 of
msgid "New chat title, 1-255 characters"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_description:1 of
msgid ""
"Use this method to change the description of a group, a supergroup or a "
"channel. The bot must be an administrator in the chat for this to work "
"and must have the appropriate administrator rights. Returns :code:`True` "
"on success."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_description:3 of
msgid "Source: https://core.telegram.org/bots/api#setchatdescription"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_description:6 of
msgid "New chat description, 0-255 characters"
msgstr ""

#: aiogram.client.bot.Bot.pin_chat_message:1 of
msgid ""
"Use this method to add a message to the list of pinned messages in a "
"chat. If the chat is not a private chat, the bot must be an administrator"
" in the chat for this to work and must have the 'can_pin_messages' "
"administrator right in a supergroup or 'can_edit_messages' administrator "
"right in a channel. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.pin_chat_message:3 of
msgid "Source: https://core.telegram.org/bots/api#pinchatmessage"
msgstr ""

#: aiogram.client.bot.Bot.pin_chat_message:6 of
msgid "Identifier of a message to pin"
msgstr ""

#: aiogram.client.bot.Bot.pin_chat_message:7 of
msgid ""
"Pass :code:`True` if it is not necessary to send a notification to all "
"chat members about the new pinned message. Notifications are always "
"disabled in channels and private chats."
msgstr ""

#: aiogram.client.bot.Bot.unpin_chat_message:1 of
msgid ""
"Use this method to remove a message from the list of pinned messages in a"
" chat. If the chat is not a private chat, the bot must be an "
"administrator in the chat for this to work and must have the "
"'can_pin_messages' administrator right in a supergroup or "
"'can_edit_messages' administrator right in a channel. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.unpin_chat_message:3 of
msgid "Source: https://core.telegram.org/bots/api#unpinchatmessage"
msgstr ""

#: aiogram.client.bot.Bot.unpin_chat_message:6 of
msgid ""
"Identifier of a message to unpin. If not specified, the most recent "
"pinned message (by sending date) will be unpinned."
msgstr ""

#: aiogram.client.bot.Bot.unpin_all_chat_messages:1 of
msgid ""
"Use this method to clear the list of pinned messages in a chat. If the "
"chat is not a private chat, the bot must be an administrator in the chat "
"for this to work and must have the 'can_pin_messages' administrator right"
" in a supergroup or 'can_edit_messages' administrator right in a channel."
" Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.unpin_all_chat_messages:3 of
msgid "Source: https://core.telegram.org/bots/api#unpinallchatmessages"
msgstr ""

#: aiogram.client.bot.Bot.leave_chat:1 of
msgid ""
"Use this method for your bot to leave a group, supergroup or channel. "
"Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.leave_chat:3 of
msgid "Source: https://core.telegram.org/bots/api#leavechat"
msgstr ""

#: aiogram.client.bot.Bot.get_chat:5
#: aiogram.client.bot.Bot.get_chat_administrators:5
#: aiogram.client.bot.Bot.get_chat_member:5
#: aiogram.client.bot.Bot.get_chat_member_count:5
#: aiogram.client.bot.Bot.get_chat_members_count:9
#: aiogram.client.bot.Bot.leave_chat:5 of
msgid ""
"Unique identifier for the target chat or username of the target "
"supergroup or channel (in the format :code:`@channelusername`)"
msgstr ""

#: aiogram.client.bot.Bot.get_chat:1 of
msgid ""
"Use this method to get up to date information about the chat (current "
"name of the user for one-on-one conversations, current username of a "
"user, group or channel, etc.). Returns a :class:`aiogram.types.chat.Chat`"
" object on success."
msgstr ""

#: aiogram.client.bot.Bot.get_chat:3 of
msgid "Source: https://core.telegram.org/bots/api#getchat"
msgstr ""

#: aiogram.client.bot.Bot.get_chat:7 of
msgid "Returns a Chat object on success."
msgstr ""

#: aiogram.client.bot.Bot.get_chat_administrators:1 of
msgid ""
"Use this method to get a list of administrators in a chat, which aren't "
"bots. Returns an Array of :class:`aiogram.types.chat_member.ChatMember` "
"objects."
msgstr ""

#: aiogram.client.bot.Bot.get_chat_administrators:3 of
msgid "Source: https://core.telegram.org/bots/api#getchatadministrators"
msgstr ""

#: aiogram.client.bot.Bot.get_chat_administrators:7 of
msgid "Returns an Array of ChatMember objects."
msgstr ""

#: aiogram.client.bot.Bot.get_chat_member_count:1
#: aiogram.client.bot.Bot.get_chat_members_count:5 of
msgid ""
"Use this method to get the number of members in a chat. Returns *Int* on "
"success."
msgstr ""

#: aiogram.client.bot.Bot.get_chat_member_count:3
#: aiogram.client.bot.Bot.get_chat_members_count:7 of
msgid "Source: https://core.telegram.org/bots/api#getchatmembercount"
msgstr ""

#: aiogram.client.bot.Bot.get_chat_member_count:7
#: aiogram.client.bot.Bot.get_chat_members_count:11 of
msgid "Returns Int on success."
msgstr ""

#: aiogram.client.bot.Bot.get_chat_member:1 of
msgid ""
"Use this method to get information about a member of a chat. Returns a "
":class:`aiogram.types.chat_member.ChatMember` object on success."
msgstr ""

#: aiogram.client.bot.Bot.get_chat_member:3 of
msgid "Source: https://core.telegram.org/bots/api#getchatmember"
msgstr ""

#: aiogram.client.bot.Bot.get_chat_member:8 of
msgid "Returns a ChatMember object on success."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_sticker_set:1 of
msgid ""
"Use this method to set a new group sticker set for a supergroup. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. Use the field *can_set_sticker_set* "
"optionally returned in :class:`aiogram.methods.get_chat.GetChat` requests"
" to check if the bot can use this method. Returns :code:`True` on "
"success."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_sticker_set:3 of
msgid "Source: https://core.telegram.org/bots/api#setchatstickerset"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_sticker_set:6 of
msgid "Name of the sticker set to be set as the group sticker set"
msgstr ""

#: aiogram.client.bot.Bot.delete_chat_sticker_set:7
#: aiogram.client.bot.Bot.set_chat_sticker_set:8 of
msgid ""
"Use the field can_set_sticker_set optionally returned in getChat requests"
" to check if the bot can use this method. Returns True on success."
msgstr ""

#: aiogram.client.bot.Bot.delete_chat_sticker_set:1 of
msgid ""
"Use this method to delete a group sticker set from a supergroup. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. Use the field *can_set_sticker_set* "
"optionally returned in :class:`aiogram.methods.get_chat.GetChat` requests"
" to check if the bot can use this method. Returns :code:`True` on "
"success."
msgstr ""

#: aiogram.client.bot.Bot.delete_chat_sticker_set:3 of
msgid "Source: https://core.telegram.org/bots/api#deletechatstickerset"
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:1 of
msgid ""
"Use this method to send answers to callback queries sent from `inline "
"keyboards <https://core.telegram.org/bots#inline-keyboards-and-on-the-"
"fly-updating>`_. The answer will be displayed to the user as a "
"notification at the top of the chat screen or as an alert. On success, "
":code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:3 of
msgid ""
"Alternatively, the user can be redirected to the specified Game URL. For "
"this option to work, you must first create a game for your bot via "
"`@BotFather <https://t.me/botfather>`_ and accept the terms. Otherwise, "
"you may use links like :code:`t.me/your_bot?start=XXXX` that open your "
"bot with a parameter."
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:5 of
msgid "Source: https://core.telegram.org/bots/api#answercallbackquery"
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:7
#: aiogram.client.bot.Bot.answer_pre_checkout_query:5
#: aiogram.client.bot.Bot.answer_shipping_query:5
#: aiogram.client.bot.Bot.answer_web_app_query:5 of
msgid "Unique identifier for the query to be answered"
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:8 of
msgid ""
"Text of the notification. If not specified, nothing will be shown to the "
"user, 0-200 characters"
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:9 of
msgid ""
"If :code:`True`, an alert will be shown by the client instead of a "
"notification at the top of the chat screen. Defaults to *false*."
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:10 of
msgid ""
"URL that will be opened by the user's client. If you have created a "
":class:`aiogram.types.game.Game` and accepted the conditions via "
"`@BotFather <https://t.me/botfather>`_, specify the URL that opens your "
"game - note that this will only work if the query comes from a "
"`https://core.telegram.org/bots/api#inlinekeyboardbutton "
"<https://core.telegram.org/bots/api#inlinekeyboardbutton>`_ "
"*callback_game* button."
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:11 of
msgid ""
"The maximum amount of time in seconds that the result of the callback "
"query may be cached client-side. Telegram apps will support caching "
"starting in version 3.14. Defaults to 0."
msgstr ""

#: aiogram.client.bot.Bot.answer_callback_query:13
#: aiogram.client.bot.Bot.answer_inline_query:15
#: aiogram.client.bot.Bot.answer_pre_checkout_query:9
#: aiogram.client.bot.Bot.answer_shipping_query:10 of
msgid "On success, True is returned."
msgstr ""

#: aiogram.client.bot.Bot.set_my_commands:1 of
msgid ""
"Use this method to change the list of the bot's commands. See "
"`https://core.telegram.org/bots#commands "
"<https://core.telegram.org/bots#commands>`_`https://core.telegram.org/bots#commands"
" <https://core.telegram.org/bots#commands>`_ for more details about bot "
"commands. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.set_my_commands:3 of
msgid "Source: https://core.telegram.org/bots/api#setmycommands"
msgstr ""

#: aiogram.client.bot.Bot.set_my_commands:5 of
msgid ""
"A JSON-serialized list of bot commands to be set as the list of the bot's"
" commands. At most 100 commands can be specified."
msgstr ""

#: aiogram.client.bot.Bot.delete_my_commands:5
#: aiogram.client.bot.Bot.set_my_commands:6 of
msgid ""
"A JSON-serialized object, describing scope of users for which the "
"commands are relevant. Defaults to "
":class:`aiogram.types.bot_command_scope_default.BotCommandScopeDefault`."
msgstr ""

#: aiogram.client.bot.Bot.delete_my_commands:6
#: aiogram.client.bot.Bot.set_my_commands:7 of
msgid ""
"A two-letter ISO 639-1 language code. If empty, commands will be applied "
"to all users from the given scope, for whose language there are no "
"dedicated commands"
msgstr ""

#: aiogram.client.bot.Bot.delete_my_commands:1 of
msgid ""
"Use this method to delete the list of the bot's commands for the given "
"scope and user language. After deletion, `higher level commands "
"<https://core.telegram.org/bots/api#determining-list-of-commands>`_ will "
"be shown to affected users. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.delete_my_commands:3 of
msgid "Source: https://core.telegram.org/bots/api#deletemycommands"
msgstr ""

#: aiogram.client.bot.Bot.get_my_commands:1 of
msgid ""
"Use this method to get the current list of the bot's commands for the "
"given scope and user language. Returns an Array of "
":class:`aiogram.types.bot_command.BotCommand` objects. If commands aren't"
" set, an empty list is returned."
msgstr ""

#: aiogram.client.bot.Bot.get_my_commands:3 of
msgid "Source: https://core.telegram.org/bots/api#getmycommands"
msgstr ""

#: aiogram.client.bot.Bot.get_my_commands:5 of
msgid ""
"A JSON-serialized object, describing scope of users. Defaults to "
":class:`aiogram.types.bot_command_scope_default.BotCommandScopeDefault`."
msgstr ""

#: aiogram.client.bot.Bot.get_my_commands:6 of
msgid "A two-letter ISO 639-1 language code or an empty string"
msgstr ""

#: aiogram.client.bot.Bot.get_my_commands:8 of
msgid ""
"Returns an Array of BotCommand objects. If commands aren't set, an empty "
"list is returned."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_menu_button:1 of
msgid ""
"Use this method to change the bot's menu button in a private chat, or the"
" default menu button. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.set_chat_menu_button:3 of
msgid "Source: https://core.telegram.org/bots/api#setchatmenubutton"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_menu_button:5 of
msgid ""
"Unique identifier for the target private chat. If not specified, default "
"bot's menu button will be changed"
msgstr ""

#: aiogram.client.bot.Bot.set_chat_menu_button:6 of
msgid ""
"A JSON-serialized object for the bot's new menu button. Defaults to "
":class:`aiogram.types.menu_button_default.MenuButtonDefault`"
msgstr ""

#: aiogram.client.bot.Bot.get_chat_menu_button:1 of
msgid ""
"Use this method to get the current value of the bot's menu button in a "
"private chat, or the default menu button. Returns "
":class:`aiogram.types.menu_button.MenuButton` on success."
msgstr ""

#: aiogram.client.bot.Bot.get_chat_menu_button:3 of
msgid "Source: https://core.telegram.org/bots/api#getchatmenubutton"
msgstr ""

#: aiogram.client.bot.Bot.get_chat_menu_button:5 of
msgid ""
"Unique identifier for the target private chat. If not specified, default "
"bot's menu button will be returned"
msgstr ""

#: aiogram.client.bot.Bot.get_chat_menu_button:7 of
msgid "Returns MenuButton on success."
msgstr ""

#: aiogram.client.bot.Bot.set_my_default_administrator_rights:1 of
msgid ""
"Use this method to change the default administrator rights requested by "
"the bot when it's added as an administrator to groups or channels. These "
"rights will be suggested to users, but they are are free to modify the "
"list before adding the bot. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.set_my_default_administrator_rights:3 of
msgid "Source: https://core.telegram.org/bots/api#setmydefaultadministratorrights"
msgstr ""

#: aiogram.client.bot.Bot.set_my_default_administrator_rights:5 of
msgid ""
"A JSON-serialized object describing new default administrator rights. If "
"not specified, the default administrator rights will be cleared."
msgstr ""

#: aiogram.client.bot.Bot.set_my_default_administrator_rights:6 of
msgid ""
"Pass :code:`True` to change the default administrator rights of the bot "
"in channels. Otherwise, the default administrator rights of the bot for "
"groups and supergroups will be changed."
msgstr ""

#: aiogram.client.bot.Bot.get_my_default_administrator_rights:1 of
msgid ""
"Use this method to get the current default administrator rights of the "
"bot. Returns "
":class:`aiogram.types.chat_administrator_rights.ChatAdministratorRights` "
"on success."
msgstr ""

#: aiogram.client.bot.Bot.get_my_default_administrator_rights:3 of
msgid "Source: https://core.telegram.org/bots/api#getmydefaultadministratorrights"
msgstr ""

#: aiogram.client.bot.Bot.get_my_default_administrator_rights:5 of
msgid ""
"Pass :code:`True` to get default administrator rights of the bot in "
"channels. Otherwise, default administrator rights of the bot for groups "
"and supergroups will be returned."
msgstr ""

#: aiogram.client.bot.Bot.get_my_default_administrator_rights:7 of
msgid "Returns ChatAdministratorRights on success."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_text:1 of
msgid ""
"Use this method to edit text and `game "
"<https://core.telegram.org/bots/api#games>`_ messages. On success, if the"
" edited message is not an inline message, the edited "
":class:`aiogram.types.message.Message` is returned, otherwise "
":code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_text:3 of
msgid "Source: https://core.telegram.org/bots/api#editmessagetext"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_text:5 of
msgid "New text of the message, 1-4096 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:11
#: aiogram.client.bot.Bot.edit_message_reply_markup:8
#: aiogram.client.bot.Bot.edit_message_text:12 of
msgid ""
"A JSON-serialized object for an `inline keyboard "
"<https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-"
"updating>`_."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:1 of
msgid ""
"Use this method to edit captions of messages. On success, if the edited "
"message is not an inline message, the edited "
":class:`aiogram.types.message.Message` is returned, otherwise "
":code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:3 of
msgid "Source: https://core.telegram.org/bots/api#editmessagecaption"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:8 of
msgid "New caption of the message, 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_caption:9 of
msgid ""
"Mode for parsing entities in the message caption. See `formatting options"
" <https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_media:1 of
msgid ""
"Use this method to edit animation, audio, document, photo, or video "
"messages. If a message is part of a message album, then it can be edited "
"only to an audio for audio albums, only to a document for document albums"
" and to a photo or a video otherwise. When an inline message is edited, a"
" new file can't be uploaded; use a previously uploaded file via its "
"file_id or specify a URL. On success, if the edited message is not an "
"inline message, the edited :class:`aiogram.types.message.Message` is "
"returned, otherwise :code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_media:3 of
msgid "Source: https://core.telegram.org/bots/api#editmessagemedia"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_media:5 of
msgid "A JSON-serialized object for a new media content of the message"
msgstr ""

#: aiogram.client.bot.Bot.edit_message_reply_markup:1 of
msgid ""
"Use this method to edit only the reply markup of messages. On success, if"
" the edited message is not an inline message, the edited "
":class:`aiogram.types.message.Message` is returned, otherwise "
":code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.edit_message_reply_markup:3 of
msgid "Source: https://core.telegram.org/bots/api#editmessagereplymarkup"
msgstr ""

#: aiogram.client.bot.Bot.stop_poll:1 of
msgid ""
"Use this method to stop a poll which was sent by the bot. On success, the"
" stopped :class:`aiogram.types.poll.Poll` is returned."
msgstr ""

#: aiogram.client.bot.Bot.stop_poll:3 of
msgid "Source: https://core.telegram.org/bots/api#stoppoll"
msgstr ""

#: aiogram.client.bot.Bot.stop_poll:6 of
msgid "Identifier of the original message with the poll"
msgstr ""

#: aiogram.client.bot.Bot.stop_poll:7 of
msgid ""
"A JSON-serialized object for a new message `inline keyboard "
"<https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-"
"updating>`_."
msgstr ""

#: aiogram.client.bot.Bot.stop_poll:9 of
msgid "On success, the stopped Poll is returned."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:1 of
msgid ""
"Use this method to delete a message, including service messages, with the"
" following limitations:"
msgstr ""

#: aiogram.client.bot.Bot.delete_message:3 of
msgid "A message can only be deleted if it was sent less than 48 hours ago."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:5 of
msgid ""
"A dice message in a private chat can only be deleted if it was sent more "
"than 24 hours ago."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:7 of
msgid ""
"Bots can delete outgoing messages in private chats, groups, and "
"supergroups."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:9 of
msgid "Bots can delete incoming messages in private chats."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:11 of
msgid ""
"Bots granted *can_post_messages* permissions can delete outgoing messages"
" in channels."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:13 of
msgid ""
"If the bot is an administrator of a group, it can delete any message "
"there."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:15 of
msgid ""
"If the bot has *can_delete_messages* permission in a supergroup or a "
"channel, it can delete any message there."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:17 of
msgid "Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.delete_message:19 of
msgid "Source: https://core.telegram.org/bots/api#deletemessage"
msgstr ""

#: aiogram.client.bot.Bot.delete_message:22 of
msgid "Identifier of the message to delete"
msgstr ""

#: aiogram.client.bot.Bot.send_sticker:1 of
msgid ""
"Use this method to send static .WEBP, `animated "
"<https://telegram.org/blog/animated-stickers>`_ .TGS, or `video "
"<https://telegram.org/blog/video-stickers-better-reactions>`_ .WEBM "
"stickers. On success, the sent :class:`aiogram.types.message.Message` is "
"returned."
msgstr ""

#: aiogram.client.bot.Bot.send_sticker:3 of
msgid "Source: https://core.telegram.org/bots/api#sendsticker"
msgstr ""

#: aiogram.client.bot.Bot.send_sticker:6 of
msgid ""
"Sticker to send. Pass a file_id as String to send a file that exists on "
"the Telegram servers (recommended), pass an HTTP URL as a String for "
"Telegram to get a .WEBP file from the Internet, or upload a new one using"
" multipart/form-data. :ref:`More information on Sending Files » <sending-"
"files>`"
msgstr ""

#: aiogram.client.bot.Bot.get_sticker_set:1 of
msgid ""
"Use this method to get a sticker set. On success, a "
":class:`aiogram.types.sticker_set.StickerSet` object is returned."
msgstr ""

#: aiogram.client.bot.Bot.get_sticker_set:3 of
msgid "Source: https://core.telegram.org/bots/api#getstickerset"
msgstr ""

#: aiogram.client.bot.Bot.get_sticker_set:5 of
msgid "Name of the sticker set"
msgstr ""

#: aiogram.client.bot.Bot.get_sticker_set:7 of
msgid "On success, a StickerSet object is returned."
msgstr ""

#: aiogram.client.bot.Bot.get_custom_emoji_stickers:1 of
msgid ""
"Use this method to get information about custom emoji stickers by their "
"identifiers. Returns an Array of :class:`aiogram.types.sticker.Sticker` "
"objects."
msgstr ""

#: aiogram.client.bot.Bot.get_custom_emoji_stickers:3 of
msgid "Source: https://core.telegram.org/bots/api#getcustomemojistickers"
msgstr ""

#: aiogram.client.bot.Bot.get_custom_emoji_stickers:5 of
msgid ""
"List of custom emoji identifiers. At most 200 custom emoji identifiers "
"can be specified."
msgstr ""

#: aiogram.client.bot.Bot.get_custom_emoji_stickers:7 of
msgid "Returns an Array of Sticker objects."
msgstr ""

#: aiogram.client.bot.Bot.upload_sticker_file:1 of
msgid ""
"Use this method to upload a .PNG file with a sticker for later use in "
"*createNewStickerSet* and *addStickerToSet* methods (can be used multiple"
" times). Returns the uploaded :class:`aiogram.types.file.File` on "
"success."
msgstr ""

#: aiogram.client.bot.Bot.upload_sticker_file:3 of
msgid "Source: https://core.telegram.org/bots/api#uploadstickerfile"
msgstr ""

#: aiogram.client.bot.Bot.upload_sticker_file:5 of
msgid "User identifier of sticker file owner"
msgstr ""

#: aiogram.client.bot.Bot.upload_sticker_file:6 of
msgid ""
"**PNG** image with the sticker, must be up to 512 kilobytes in size, "
"dimensions must not exceed 512px, and either width or height must be "
"exactly 512px. :ref:`More information on Sending Files » <sending-files>`"
msgstr ""

#: aiogram.client.bot.Bot.upload_sticker_file:8 of
msgid "Returns the uploaded File on success."
msgstr ""

#: aiogram.client.bot.Bot.create_new_sticker_set:1 of
msgid ""
"Use this method to create a new sticker set owned by a user. The bot will"
" be able to edit the sticker set thus created. You **must** use exactly "
"one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*. "
"Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.create_new_sticker_set:3 of
msgid "Source: https://core.telegram.org/bots/api#createnewstickerset"
msgstr ""

#: aiogram.client.bot.Bot.create_new_sticker_set:5 of
msgid "User identifier of created sticker set owner"
msgstr ""

#: aiogram.client.bot.Bot.create_new_sticker_set:6 of
msgid ""
"Short name of sticker set, to be used in :code:`t.me/addstickers/` URLs "
"(e.g., *animals*). Can contain only English letters, digits and "
"underscores. Must begin with a letter, can't contain consecutive "
"underscores and must end in :code:`\"_by_<bot_username>\"`. "
":code:`<bot_username>` is case insensitive. 1-64 characters."
msgstr ""

#: aiogram.client.bot.Bot.create_new_sticker_set:7 of
msgid "Sticker set title, 1-64 characters"
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:7
#: aiogram.client.bot.Bot.create_new_sticker_set:8 of
msgid "One or more emoji corresponding to the sticker"
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:8
#: aiogram.client.bot.Bot.create_new_sticker_set:9 of
msgid ""
"**PNG** image with the sticker, must be up to 512 kilobytes in size, "
"dimensions must not exceed 512px, and either width or height must be "
"exactly 512px. Pass a *file_id* as a String to send a file that already "
"exists on the Telegram servers, pass an HTTP URL as a String for Telegram"
" to get a file from the Internet, or upload a new one using multipart"
"/form-data. :ref:`More information on Sending Files » <sending-files>`"
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:9
#: aiogram.client.bot.Bot.create_new_sticker_set:10 of
msgid ""
"**TGS** animation with the sticker, uploaded using multipart/form-data. "
"See `https://core.telegram.org/stickers#animated-sticker-requirements "
"<https://core.telegram.org/stickers#animated-sticker-"
"requirements>`_`https://core.telegram.org/stickers#animated-sticker-"
"requirements <https://core.telegram.org/stickers#animated-sticker-"
"requirements>`_ for technical requirements"
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:10
#: aiogram.client.bot.Bot.create_new_sticker_set:11 of
msgid ""
"**WEBM** video with the sticker, uploaded using multipart/form-data. See "
"`https://core.telegram.org/stickers#video-sticker-requirements "
"<https://core.telegram.org/stickers#video-sticker-"
"requirements>`_`https://core.telegram.org/stickers#video-sticker-"
"requirements <https://core.telegram.org/stickers#video-sticker-"
"requirements>`_ for technical requirements"
msgstr ""

#: aiogram.client.bot.Bot.create_new_sticker_set:12 of
msgid ""
"Type of stickers in the set, pass 'regular' or 'mask'. Custom emoji "
"sticker sets can't be created via the Bot API at the moment. By default, "
"a regular sticker set is created."
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:11
#: aiogram.client.bot.Bot.create_new_sticker_set:13 of
msgid ""
"A JSON-serialized object for position where the mask should be placed on "
"faces"
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:1 of
msgid ""
"Use this method to add a new sticker to a set created by the bot. You "
"**must** use exactly one of the fields *png_sticker*, *tgs_sticker*, or "
"*webm_sticker*. Animated stickers can be added to animated sticker sets "
"and only to them. Animated sticker sets can have up to 50 stickers. "
"Static sticker sets can have up to 120 stickers. Returns :code:`True` on "
"success."
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:3 of
msgid "Source: https://core.telegram.org/bots/api#addstickertoset"
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:5 of
msgid "User identifier of sticker set owner"
msgstr ""

#: aiogram.client.bot.Bot.add_sticker_to_set:6
#: aiogram.client.bot.Bot.set_sticker_set_thumb:5 of
msgid "Sticker set name"
msgstr ""

#: aiogram.client.bot.Bot.set_sticker_position_in_set:1 of
msgid ""
"Use this method to move a sticker in a set created by the bot to a "
"specific position. Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.set_sticker_position_in_set:3 of
msgid "Source: https://core.telegram.org/bots/api#setstickerpositioninset"
msgstr ""

#: aiogram.client.bot.Bot.delete_sticker_from_set:5
#: aiogram.client.bot.Bot.set_sticker_position_in_set:5 of
msgid "File identifier of the sticker"
msgstr ""

#: aiogram.client.bot.Bot.set_sticker_position_in_set:6 of
msgid "New sticker position in the set, zero-based"
msgstr ""

#: aiogram.client.bot.Bot.delete_sticker_from_set:1 of
msgid ""
"Use this method to delete a sticker from a set created by the bot. "
"Returns :code:`True` on success."
msgstr ""

#: aiogram.client.bot.Bot.delete_sticker_from_set:3 of
msgid "Source: https://core.telegram.org/bots/api#deletestickerfromset"
msgstr ""

#: aiogram.client.bot.Bot.set_sticker_set_thumb:1 of
msgid ""
"Use this method to set the thumbnail of a sticker set. Animated "
"thumbnails can be set for animated sticker sets only. Video thumbnails "
"can be set only for video sticker sets only. Returns :code:`True` on "
"success."
msgstr ""

#: aiogram.client.bot.Bot.set_sticker_set_thumb:3 of
msgid "Source: https://core.telegram.org/bots/api#setstickersetthumb"
msgstr ""

#: aiogram.client.bot.Bot.set_sticker_set_thumb:6 of
msgid "User identifier of the sticker set owner"
msgstr ""

#: aiogram.client.bot.Bot.set_sticker_set_thumb:7 of
msgid ""
"A **PNG** image with the thumbnail, must be up to 128 kilobytes in size "
"and have width and height exactly 100px, or a **TGS** animation with the "
"thumbnail up to 32 kilobytes in size; see "
"`https://core.telegram.org/stickers#animated-sticker-requirements "
"<https://core.telegram.org/stickers#animated-sticker-"
"requirements>`_`https://core.telegram.org/stickers#animated-sticker-"
"requirements <https://core.telegram.org/stickers#animated-sticker-"
"requirements>`_ for animated sticker technical requirements, or a "
"**WEBM** video with the thumbnail up to 32 kilobytes in size; see "
"`https://core.telegram.org/stickers#video-sticker-requirements "
"<https://core.telegram.org/stickers#video-sticker-"
"requirements>`_`https://core.telegram.org/stickers#video-sticker-"
"requirements <https://core.telegram.org/stickers#video-sticker-"
"requirements>`_ for video sticker technical requirements. Pass a "
"*file_id* as a String to send a file that already exists on the Telegram "
"servers, pass an HTTP URL as a String for Telegram to get a file from the"
" Internet, or upload a new one using multipart/form-data. :ref:`More "
"information on Sending Files » <sending-files>`. Animated sticker set "
"thumbnails can't be uploaded via HTTP URL."
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:1 of
msgid ""
"Use this method to send answers to an inline query. On success, "
":code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:3 of
msgid "No more than **50** results per query are allowed."
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:5 of
msgid "Source: https://core.telegram.org/bots/api#answerinlinequery"
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:7 of
msgid "Unique identifier for the answered query"
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:8 of
msgid "A JSON-serialized array of results for the inline query"
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:9 of
msgid ""
"The maximum amount of time in seconds that the result of the inline query"
" may be cached on the server. Defaults to 300."
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:10 of
msgid ""
"Pass :code:`True` if results may be cached on the server side only for "
"the user that sent the query. By default, results may be returned to any "
"user who sends the same query"
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:11 of
msgid ""
"Pass the offset that a client should send in the next query with the same"
" text to receive more results. Pass an empty string if there are no more "
"results or if you don't support pagination. Offset length can't exceed 64"
" bytes."
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:12 of
msgid ""
"If passed, clients will display a button with specified text that "
"switches the user to a private chat with the bot and sends the bot a "
"start message with the parameter *switch_pm_parameter*"
msgstr ""

#: aiogram.client.bot.Bot.answer_inline_query:13 of
msgid ""
"`Deep-linking <https://core.telegram.org/bots#deep-linking>`_ parameter "
"for the /start message sent to the bot when user presses the switch "
"button. 1-64 characters, only :code:`A-Z`, :code:`a-z`, :code:`0-9`, "
":code:`_` and :code:`-` are allowed."
msgstr ""

#: aiogram.client.bot.Bot.answer_web_app_query:1 of
msgid ""
"Use this method to set the result of an interaction with a `Web App "
"<https://core.telegram.org/bots/webapps>`_ and send a corresponding "
"message on behalf of the user to the chat from which the query "
"originated. On success, a "
":class:`aiogram.types.sent_web_app_message.SentWebAppMessage` object is "
"returned."
msgstr ""

#: aiogram.client.bot.Bot.answer_web_app_query:3 of
msgid "Source: https://core.telegram.org/bots/api#answerwebappquery"
msgstr ""

#: aiogram.client.bot.Bot.answer_web_app_query:6 of
msgid "A JSON-serialized object describing the message to be sent"
msgstr ""

#: aiogram.client.bot.Bot.answer_web_app_query:8 of
msgid "On success, a SentWebAppMessage object is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_invoice:1 of
msgid ""
"Use this method to send invoices. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_invoice:3 of
msgid "Source: https://core.telegram.org/bots/api#sendinvoice"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:5
#: aiogram.client.bot.Bot.send_invoice:6 of
msgid "Product name, 1-32 characters"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:6
#: aiogram.client.bot.Bot.send_invoice:7 of
msgid "Product description, 1-255 characters"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:7
#: aiogram.client.bot.Bot.send_invoice:8 of
msgid ""
"Bot-defined invoice payload, 1-128 bytes. This will not be displayed to "
"the user, use for your internal processes."
msgstr ""

#: aiogram.client.bot.Bot.send_invoice:9 of
msgid ""
"Payment provider token, obtained via `@BotFather "
"<https://t.me/botfather>`_"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:9
#: aiogram.client.bot.Bot.send_invoice:10 of
msgid ""
"Three-letter ISO 4217 currency code, see `more on currencies "
"<https://core.telegram.org/bots/payments#supported-currencies>`_"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:10
#: aiogram.client.bot.Bot.send_invoice:11 of
msgid ""
"Price breakdown, a JSON-serialized list of components (e.g. product "
"price, tax, discount, delivery cost, delivery tax, bonus, etc.)"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:11
#: aiogram.client.bot.Bot.send_invoice:12 of
msgid ""
"The maximum accepted amount for tips in the *smallest units* of the "
"currency (integer, **not** float/double). For example, for a maximum tip "
"of :code:`US$ 1.45` pass :code:`max_tip_amount = 145`. See the *exp* "
"parameter in `currencies.json "
"<https://core.telegram.org/bots/payments/currencies.json>`_, it shows the"
" number of digits past the decimal point for each currency (2 for the "
"majority of currencies). Defaults to 0"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:12
#: aiogram.client.bot.Bot.send_invoice:13 of
msgid ""
"A JSON-serialized array of suggested amounts of tips in the *smallest "
"units* of the currency (integer, **not** float/double). At most 4 "
"suggested tip amounts can be specified. The suggested tip amounts must be"
" positive, passed in a strictly increased order and must not exceed "
"*max_tip_amount*."
msgstr ""

#: aiogram.client.bot.Bot.send_invoice:14 of
msgid ""
"Unique deep-linking parameter. If left empty, **forwarded copies** of the"
" sent message will have a *Pay* button, allowing multiple users to pay "
"directly from the forwarded message, using the same invoice. If non-"
"empty, forwarded copies of the sent message will have a *URL* button with"
" a deep link to the bot (instead of a *Pay* button), with the value used "
"as the start parameter"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:13
#: aiogram.client.bot.Bot.send_invoice:15 of
msgid ""
"JSON-serialized data about the invoice, which will be shared with the "
"payment provider. A detailed description of required fields should be "
"provided by the payment provider."
msgstr ""

#: aiogram.client.bot.Bot.send_invoice:16 of
msgid ""
"URL of the product photo for the invoice. Can be a photo of the goods or "
"a marketing image for a service. People like it better when they see what"
" they are paying for."
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:15
#: aiogram.client.bot.Bot.send_invoice:17 of
msgid "Photo size in bytes"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:16
#: aiogram.client.bot.Bot.send_invoice:18 of
msgid "Photo width"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:17
#: aiogram.client.bot.Bot.send_invoice:19 of
msgid "Photo height"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:18
#: aiogram.client.bot.Bot.send_invoice:20 of
msgid ""
"Pass :code:`True` if you require the user's full name to complete the "
"order"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:19
#: aiogram.client.bot.Bot.send_invoice:21 of
msgid ""
"Pass :code:`True` if you require the user's phone number to complete the "
"order"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:20
#: aiogram.client.bot.Bot.send_invoice:22 of
msgid ""
"Pass :code:`True` if you require the user's email address to complete the"
" order"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:21
#: aiogram.client.bot.Bot.send_invoice:23 of
msgid ""
"Pass :code:`True` if you require the user's shipping address to complete "
"the order"
msgstr ""

#: aiogram.client.bot.Bot.send_invoice:24 of
msgid "Pass :code:`True` if the user's phone number should be sent to provider"
msgstr ""

#: aiogram.client.bot.Bot.send_invoice:25 of
msgid "Pass :code:`True` if the user's email address should be sent to provider"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:24
#: aiogram.client.bot.Bot.send_invoice:26 of
msgid "Pass :code:`True` if the final price depends on the shipping method"
msgstr ""

#: aiogram.client.bot.Bot.send_invoice:31 of
msgid ""
"A JSON-serialized object for an `inline keyboard "
"<https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-"
"updating>`_. If empty, one 'Pay :code:`total price`' button will be "
"shown. If not empty, the first button must be a Pay button."
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:1 of
msgid ""
"Use this method to create a link for an invoice. Returns the created "
"invoice link as *String* on success."
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:3 of
msgid "Source: https://core.telegram.org/bots/api#createinvoicelink"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:8 of
msgid "Payment provider token, obtained via `BotFather <https://t.me/botfather>`_"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:14 of
msgid ""
"URL of the product photo for the invoice. Can be a photo of the goods or "
"a marketing image for a service."
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:22 of
msgid ""
"Pass :code:`True` if the user's phone number should be sent to the "
"provider"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:23 of
msgid ""
"Pass :code:`True` if the user's email address should be sent to the "
"provider"
msgstr ""

#: aiogram.client.bot.Bot.create_invoice_link:26 of
msgid "Returns the created invoice link as String on success."
msgstr ""

#: aiogram.client.bot.Bot.answer_shipping_query:1 of
msgid ""
"If you sent an invoice requesting a shipping address and the parameter "
"*is_flexible* was specified, the Bot API will send an "
":class:`aiogram.types.update.Update` with a *shipping_query* field to the"
" bot. Use this method to reply to shipping queries. On success, "
":code:`True` is returned."
msgstr ""

#: aiogram.client.bot.Bot.answer_shipping_query:3 of
msgid "Source: https://core.telegram.org/bots/api#answershippingquery"
msgstr ""

#: aiogram.client.bot.Bot.answer_shipping_query:6 of
msgid ""
"Pass :code:`True` if delivery to the specified address is possible and "
":code:`False` if there are any problems (for example, if delivery to the "
"specified address is not possible)"
msgstr ""

#: aiogram.client.bot.Bot.answer_shipping_query:7 of
msgid ""
"Required if *ok* is :code:`True`. A JSON-serialized array of available "
"shipping options."
msgstr ""

#: aiogram.client.bot.Bot.answer_shipping_query:8 of
msgid ""
"Required if *ok* is :code:`False`. Error message in human readable form "
"that explains why it is impossible to complete the order (e.g. \"Sorry, "
"delivery to your desired address is unavailable'). Telegram will display "
"this message to the user."
msgstr ""

#: aiogram.client.bot.Bot.answer_pre_checkout_query:1 of
msgid ""
"Once the user has confirmed their payment and shipping details, the Bot "
"API sends the final confirmation in the form of an "
":class:`aiogram.types.update.Update` with the field *pre_checkout_query*."
" Use this method to respond to such pre-checkout queries. On success, "
":code:`True` is returned. **Note:** The Bot API must receive an answer "
"within 10 seconds after the pre-checkout query was sent."
msgstr ""

#: aiogram.client.bot.Bot.answer_pre_checkout_query:3 of
msgid "Source: https://core.telegram.org/bots/api#answerprecheckoutquery"
msgstr ""

#: aiogram.client.bot.Bot.answer_pre_checkout_query:6 of
msgid ""
"Specify :code:`True` if everything is alright (goods are available, etc.)"
" and the bot is ready to proceed with the order. Use :code:`False` if "
"there are any problems."
msgstr ""

#: aiogram.client.bot.Bot.answer_pre_checkout_query:7 of
msgid ""
"Required if *ok* is :code:`False`. Error message in human readable form "
"that explains the reason for failure to proceed with the checkout (e.g. "
"\"Sorry, somebody just bought the last of our amazing black T-shirts "
"while you were busy filling out your payment details. Please choose a "
"different color or garment!\"). Telegram will display this message to the"
" user."
msgstr ""

#: aiogram.client.bot.Bot.set_passport_data_errors:1 of
msgid ""
"Informs a user that some of the Telegram Passport elements they provided "
"contains errors. The user will not be able to re-submit their Passport to"
" you until the errors are fixed (the contents of the field for which you "
"returned the error must change). Returns :code:`True` on success. Use "
"this if the data submitted by the user doesn't satisfy the standards your"
" service requires for any reason. For example, if a birthday date seems "
"invalid, a submitted document is blurry, a scan shows evidence of "
"tampering, etc. Supply some details in the error message to make sure the"
" user knows how to correct the issues."
msgstr ""

#: aiogram.client.bot.Bot.set_passport_data_errors:4 of
msgid "Source: https://core.telegram.org/bots/api#setpassportdataerrors"
msgstr ""

#: aiogram.client.bot.Bot.set_game_score:5
#: aiogram.client.bot.Bot.set_passport_data_errors:6 of
msgid "User identifier"
msgstr ""

#: aiogram.client.bot.Bot.set_passport_data_errors:7 of
msgid "A JSON-serialized array describing the errors"
msgstr ""

#: aiogram.client.bot.Bot.set_passport_data_errors:9 of
msgid ""
"The user will not be able to re-submit their Passport to you until the "
"errors are fixed (the contents of the field for which you returned the "
"error must change). Returns True on success."
msgstr ""

#: aiogram.client.bot.Bot.send_game:1 of
msgid ""
"Use this method to send a game. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.client.bot.Bot.send_game:3 of
msgid "Source: https://core.telegram.org/bots/api#sendgame"
msgstr ""

#: aiogram.client.bot.Bot.send_game:5 of
msgid "Unique identifier for the target chat"
msgstr ""

#: aiogram.client.bot.Bot.send_game:6 of
msgid ""
"Short name of the game, serves as the unique identifier for the game. Set"
" up your games via `@BotFather <https://t.me/botfather>`_."
msgstr ""

#: aiogram.client.bot.Bot.send_game:11 of
msgid ""
"A JSON-serialized object for an `inline keyboard "
"<https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-"
"updating>`_. If empty, one 'Play game_title' button will be shown. If not"
" empty, the first button must launch the game."
msgstr ""

#: aiogram.client.bot.Bot.set_game_score:1 of
msgid ""
"Use this method to set the score of the specified user in a game message."
" On success, if the message is not an inline message, the "
":class:`aiogram.types.message.Message` is returned, otherwise "
":code:`True` is returned. Returns an error, if the new score is not "
"greater than the user's current score in the chat and *force* is "
":code:`False`."
msgstr ""

#: aiogram.client.bot.Bot.set_game_score:3 of
msgid "Source: https://core.telegram.org/bots/api#setgamescore"
msgstr ""

#: aiogram.client.bot.Bot.set_game_score:6 of
msgid "New score, must be non-negative"
msgstr ""

#: aiogram.client.bot.Bot.set_game_score:7 of
msgid ""
"Pass :code:`True` if the high score is allowed to decrease. This can be "
"useful when fixing mistakes or banning cheaters"
msgstr ""

#: aiogram.client.bot.Bot.set_game_score:8 of
msgid ""
"Pass :code:`True` if the game message should not be automatically edited "
"to include the current scoreboard"
msgstr ""

#: aiogram.client.bot.Bot.get_game_high_scores:8
#: aiogram.client.bot.Bot.set_game_score:9 of
msgid ""
"Required if *inline_message_id* is not specified. Unique identifier for "
"the target chat"
msgstr ""

#: aiogram.client.bot.Bot.get_game_high_scores:9
#: aiogram.client.bot.Bot.set_game_score:10 of
msgid ""
"Required if *inline_message_id* is not specified. Identifier of the sent "
"message"
msgstr ""

#: aiogram.client.bot.Bot.set_game_score:13 of
msgid ""
"On success, if the message is not an inline message, the Message is "
"returned, otherwise True is returned. Returns an error, if the new score "
"is not greater than the user's current score in the chat and force is "
"False."
msgstr ""

#: aiogram.client.bot.Bot.get_game_high_scores:1 of
msgid ""
"Use this method to get data for high score tables. Will return the score "
"of the specified user and several of their neighbors in a game. Returns "
"an Array of :class:`aiogram.types.game_high_score.GameHighScore` objects."
msgstr ""

#: aiogram.client.bot.Bot.get_game_high_scores:3 of
msgid ""
"This method will currently return scores for the target user, plus two of"
" their closest neighbors on each side. Will also return the top three "
"users if the user and their neighbors are not among them. Please note "
"that this behavior is subject to change."
msgstr ""

#: aiogram.client.bot.Bot.get_game_high_scores:5 of
msgid "Source: https://core.telegram.org/bots/api#getgamehighscores"
msgstr ""

#: aiogram.client.bot.Bot.get_game_high_scores:7 of
msgid "Target user id"
msgstr ""

#: aiogram.client.bot.Bot.get_game_high_scores:12 of
msgid ""
"Will return the score of the specified user and several of their "
"neighbors in a game. Returns an Array of GameHighScore objects. This "
"method will currently return scores for the target user, plus two of "
"their closest neighbors on each side. Will also return the top three "
"users if the user and their neighbors are not among them."
msgstr ""
