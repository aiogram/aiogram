# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-29 02:16+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../api/types/chat_join_request.rst:3
msgid "ChatJoinRequest"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest:1 of
msgid "Represents a join request sent to a chat."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest:3 of
msgid "Source: https://core.telegram.org/bots/api#chatjoinrequest"
msgstr ""

#: ../../docstring aiogram.types.chat_join_request.ChatJoinRequest.chat:1 of
msgid "Chat to which the request was sent"
msgstr ""

#: ../../docstring aiogram.types.chat_join_request.ChatJoinRequest.from_user:1
#: of
msgid "User that sent the join request"
msgstr ""

#: ../../docstring
#: aiogram.types.chat_join_request.ChatJoinRequest.user_chat_id:1 of
msgid ""
"Identifier of a private chat with the user who sent the join request. "
"This number may have more than 32 significant bits and some programming "
"languages may have difficulty/silent defects in interpreting it. But it "
"has at most 52 significant bits, so a 64-bit integer or double-precision "
"float type are safe for storing this identifier. The bot can use this "
"identifier for 5 minutes to send messages until the join request is "
"processed, assuming no other administrator contacted the user."
msgstr ""

#: ../../docstring aiogram.types.chat_join_request.ChatJoinRequest.date:1 of
msgid "Date the request was sent in Unix time"
msgstr ""

#: ../../docstring aiogram.types.chat_join_request.ChatJoinRequest.bio:1 of
msgid "*Optional*. Bio of the user."
msgstr ""

#: ../../docstring
#: aiogram.types.chat_join_request.ChatJoinRequest.invite_link:1 of
msgid ""
"*Optional*. Chat invite link that was used by the user to send the join "
"request"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.approve:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.approve_chat_join_request.ApproveChatJoinRequest`"
" will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:4
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:4
#: aiogram.types.chat_join_request.ChatJoinRequest.approve:4
#: aiogram.types.chat_join_request.ChatJoinRequest.decline:4 of
msgid ":code:`chat_id`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.approve:5
#: aiogram.types.chat_join_request.ChatJoinRequest.decline:5 of
msgid ":code:`user_id`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.approve:7 of
msgid ""
"Use this method to approve a chat join request. The bot must be an "
"administrator in the chat for this to work and must have the "
"*can_invite_users* administrator right. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.approve:9 of
msgid "Source: https://core.telegram.org/bots/api#approvechatjoinrequest"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.approve
#: aiogram.types.chat_join_request.ChatJoinRequest.decline of
msgid "Returns"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.approve:11 of
msgid ""
"instance of method "
":class:`aiogram.methods.approve_chat_join_request.ApproveChatJoinRequest`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.decline:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.decline_chat_join_request.DeclineChatJoinRequest`"
" will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.decline:7 of
msgid ""
"Use this method to decline a chat join request. The bot must be an "
"administrator in the chat for this to work and must have the "
"*can_invite_users* administrator right. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.decline:9 of
msgid "Source: https://core.telegram.org/bots/api#declinechatjoinrequest"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.decline:11 of
msgid ""
"instance of method "
":class:`aiogram.methods.decline_chat_join_request.DeclineChatJoinRequest`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_message.SendMessage` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:6 of
msgid ""
"Use this method to send text messages. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendmessage"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm of
msgid "Parameters"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:10 of
msgid "Text of the message to be sent, 1-4096 characters after entities parsing"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:11 of
msgid ""
"Unique identifier for the target message thread (topic) of the forum; for"
" forum supergroups only"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:12 of
msgid ""
"Mode for parsing entities in the message text. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:13 of
msgid ""
"A JSON-serialized list of special entities that appear in message text, "
"which can be specified instead of *parse_mode*"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:14 of
msgid "Disables link previews for links in this message"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:32
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:32
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:16 of
msgid ""
"Sends the message `silently <https://telegram.org/blog/channels-2-0"
"#silent-messages>`_. Users will receive a notification with no sound."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:33
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:33
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:17 of
msgid "Protects the contents of the sent message from forwarding and saving"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:34
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:34
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:25
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:25
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:18 of
msgid "If the message is a reply, ID of the original message"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:35
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:35
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:26
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:26
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:19 of
msgid ""
"Pass :code:`True` if the message should be sent even if the specified "
"replied-to message is not found"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:27
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:27
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:25
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:25
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:20 of
msgid ""
"Additional interface options. A JSON-serialized object for an `inline "
"keyboard <https://core.telegram.org/bots/features#inline-keyboards>`_, "
"`custom reply keyboard "
"<https://core.telegram.org/bots/features#keyboards>`_, instructions to "
"remove reply keyboard or to force a reply from the user."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_pm:20 of
msgid "instance of method :class:`aiogram.methods.send_message.SendMessage`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_animation.SendAnimation`"
" will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:6 of
msgid ""
"Use this method to send animation files (GIF or H.264/MPEG-4 AVC video "
"without sound). On success, the sent "
":class:`aiogram.types.message.Message` is returned. Bots can currently "
"send animation files of up to 50 MB in size, this limit may be changed in"
" the future."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendanimation"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:10 of
msgid ""
"Animation to send. Pass a file_id as String to send an animation that "
"exists on the Telegram servers (recommended), pass an HTTP URL as a "
"String for Telegram to get an animation from the Internet, or upload a "
"new animation using multipart/form-data. :ref:`More information on "
"Sending Files » <sending-files>`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:12 of
msgid "Duration of sent animation in seconds"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:13 of
msgid "Animation width"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:14 of
msgid "Animation height"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:15 of
msgid ""
"Thumbnail of the file sent; can be ignored if thumbnail generation for "
"the file is supported server-side. The thumbnail should be in JPEG format"
" and less than 200 kB in size. A thumbnail's width and height should not "
"exceed 320. Ignored if the file is not uploaded using multipart/form-"
"data. Thumbnails can't be reused and can be only uploaded as a new file, "
"so you can pass 'attach://<file_attach_name>' if the thumbnail was "
"uploaded using multipart/form-data under <file_attach_name>. :ref:`More "
"information on Sending Files » <sending-files>`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:16 of
msgid ""
"Animation caption (may also be used when resending animation by "
"*file_id*), 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:17 of
msgid ""
"Mode for parsing entities in the animation caption. See `formatting "
"options <https://core.telegram.org/bots/api#formatting-options>`_ for "
"more details."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:14 of
msgid ""
"A JSON-serialized list of special entities that appear in the caption, "
"which can be specified instead of *parse_mode*"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:19 of
msgid ""
"Pass :code:`True` if the animation needs to be covered with a spoiler "
"animation"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation:25
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_animation_pm:25 of
msgid "instance of method :class:`aiogram.methods.send_animation.SendAnimation`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_audio.SendAudio` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:6 of
msgid ""
"Use this method to send audio files, if you want Telegram clients to "
"display them in the music player. Your audio must be in the .MP3 or .M4A "
"format. On success, the sent :class:`aiogram.types.message.Message` is "
"returned. Bots can currently send audio files of up to 50 MB in size, "
"this limit may be changed in the future. For sending voice messages, use "
"the :class:`aiogram.methods.send_voice.SendVoice` method instead."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:9
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:9 of
msgid "Source: https://core.telegram.org/bots/api#sendaudio"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:11 of
msgid ""
"Audio file to send. Pass a file_id as String to send an audio file that "
"exists on the Telegram servers (recommended), pass an HTTP URL as a "
"String for Telegram to get an audio file from the Internet, or upload a "
"new one using multipart/form-data. :ref:`More information on Sending "
"Files » <sending-files>`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:13 of
msgid "Audio caption, 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:14 of
msgid ""
"Mode for parsing entities in the audio caption. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:16 of
msgid "Duration of the audio in seconds"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:17 of
msgid "Performer"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:18 of
msgid "Track name"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio:25
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_audio_pm:25 of
msgid "instance of method :class:`aiogram.methods.send_audio.SendAudio`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_contact.SendContact` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:6 of
msgid ""
"Use this method to send phone contacts. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendcontact"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:10 of
msgid "Contact's phone number"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:11 of
msgid "Contact's first name"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:13 of
msgid "Contact's last name"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:14 of
msgid ""
"Additional data about the contact in the form of a `vCard "
"<https://en.wikipedia.org/wiki/VCard>`_, 0-2048 bytes"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_contact_pm:20 of
msgid "instance of method :class:`aiogram.methods.send_contact.SendContact`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_document.SendDocument` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:6 of
msgid ""
"Use this method to send general files. On success, the sent "
":class:`aiogram.types.message.Message` is returned. Bots can currently "
"send files of any type of up to 50 MB in size, this limit may be changed "
"in the future."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#senddocument"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:10 of
msgid ""
"File to send. Pass a file_id as String to send a file that exists on the "
"Telegram servers (recommended), pass an HTTP URL as a String for Telegram"
" to get a file from the Internet, or upload a new one using multipart"
"/form-data. :ref:`More information on Sending Files » <sending-files>`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:13 of
msgid ""
"Document caption (may also be used when resending documents by "
"*file_id*), 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:14 of
msgid ""
"Mode for parsing entities in the document caption. See `formatting "
"options <https://core.telegram.org/bots/api#formatting-options>`_ for "
"more details."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:16 of
msgid ""
"Disables automatic server-side content type detection for files uploaded "
"using multipart/form-data"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_document_pm:22 of
msgid "instance of method :class:`aiogram.methods.send_document.SendDocument`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_game.SendGame` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:6 of
msgid ""
"Use this method to send a game. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendgame"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:10 of
msgid ""
"Short name of the game, serves as the unique identifier for the game. Set"
" up your games via `@BotFather <https://t.me/botfather>`_."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:16 of
msgid ""
"A JSON-serialized object for an `inline keyboard "
"<https://core.telegram.org/bots/features#inline-keyboards>`_. If empty, "
"one 'Play game_title' button will be shown. If not empty, the first "
"button must launch the game."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_game_pm:17 of
msgid "instance of method :class:`aiogram.methods.send_game.SendGame`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_invoice.SendInvoice` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:6 of
msgid ""
"Use this method to send invoices. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendinvoice"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:10 of
msgid "Product name, 1-32 characters"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:11 of
msgid "Product description, 1-255 characters"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:12 of
msgid ""
"Bot-defined invoice payload, 1-128 bytes. This will not be displayed to "
"the user, use for your internal processes."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:13 of
msgid ""
"Payment provider token, obtained via `@BotFather "
"<https://t.me/botfather>`_"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:14 of
msgid ""
"Three-letter ISO 4217 currency code, see `more on currencies "
"<https://core.telegram.org/bots/payments#supported-currencies>`_"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:15 of
msgid ""
"Price breakdown, a JSON-serialized list of components (e.g. product "
"price, tax, discount, delivery cost, delivery tax, bonus, etc.)"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:17 of
msgid ""
"The maximum accepted amount for tips in the *smallest units* of the "
"currency (integer, **not** float/double). For example, for a maximum tip "
"of :code:`US$ 1.45` pass :code:`max_tip_amount = 145`. See the *exp* "
"parameter in `currencies.json "
"<https://core.telegram.org/bots/payments/currencies.json>`_, it shows the"
" number of digits past the decimal point for each currency (2 for the "
"majority of currencies). Defaults to 0"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:18 of
msgid ""
"A JSON-serialized array of suggested amounts of tips in the *smallest "
"units* of the currency (integer, **not** float/double). At most 4 "
"suggested tip amounts can be specified. The suggested tip amounts must be"
" positive, passed in a strictly increased order and must not exceed "
"*max_tip_amount*."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:19 of
msgid ""
"Unique deep-linking parameter. If left empty, **forwarded copies** of the"
" sent message will have a *Pay* button, allowing multiple users to pay "
"directly from the forwarded message, using the same invoice. If non-"
"empty, forwarded copies of the sent message will have a *URL* button with"
" a deep link to the bot (instead of a *Pay* button), with the value used "
"as the start parameter"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:20 of
msgid ""
"JSON-serialized data about the invoice, which will be shared with the "
"payment provider. A detailed description of required fields should be "
"provided by the payment provider."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:21 of
msgid ""
"URL of the product photo for the invoice. Can be a photo of the goods or "
"a marketing image for a service. People like it better when they see what"
" they are paying for."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:22 of
msgid "Photo size in bytes"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:23
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:23 of
msgid "Photo width"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:24 of
msgid "Photo height"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:25
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:25 of
msgid ""
"Pass :code:`True` if you require the user's full name to complete the "
"order"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:26
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:26 of
msgid ""
"Pass :code:`True` if you require the user's phone number to complete the "
"order"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:27
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:27 of
msgid ""
"Pass :code:`True` if you require the user's email address to complete the"
" order"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:28
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:28 of
msgid ""
"Pass :code:`True` if you require the user's shipping address to complete "
"the order"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:29
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:29 of
msgid "Pass :code:`True` if the user's phone number should be sent to provider"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:30
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:30 of
msgid "Pass :code:`True` if the user's email address should be sent to provider"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:31
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:31 of
msgid "Pass :code:`True` if the final price depends on the shipping method"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:36
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:36 of
msgid ""
"A JSON-serialized object for an `inline keyboard "
"<https://core.telegram.org/bots/features#inline-keyboards>`_. If empty, "
"one 'Pay :code:`total price`' button will be shown. If not empty, the "
"first button must be a Pay button."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice:37
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_invoice_pm:37 of
msgid "instance of method :class:`aiogram.methods.send_invoice.SendInvoice`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_location.SendLocation` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:6 of
msgid ""
"Use this method to send point on the map. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendlocation"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:10 of
msgid "Latitude of the location"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:11 of
msgid "Longitude of the location"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:13 of
msgid "The radius of uncertainty for the location, measured in meters; 0-1500"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:14 of
msgid ""
"Period in seconds for which the location will be updated (see `Live "
"Locations <https://telegram.org/blog/live-locations>`_, should be between"
" 60 and 86400."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:15 of
msgid ""
"For live locations, a direction in which the user is moving, in degrees. "
"Must be between 1 and 360 if specified."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:16 of
msgid ""
"For live locations, a maximum distance for proximity alerts about "
"approaching another chat member, in meters. Must be between 1 and 100000 "
"if specified."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_location_pm:22 of
msgid "instance of method :class:`aiogram.methods.send_location.SendLocation`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.send_media_group.SendMediaGroup` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:6 of
msgid ""
"Use this method to send a group of photos, videos, documents or audios as"
" an album. Documents and audio files can be only grouped in an album with"
" messages of the same type. On success, an array of `Messages "
"<https://core.telegram.org/bots/api#message>`_ that were sent is "
"returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendmediagroup"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:10 of
msgid ""
"A JSON-serialized array describing messages to be sent, must include 2-10"
" items"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:12 of
msgid ""
"Sends messages `silently <https://telegram.org/blog/channels-2-0#silent-"
"messages>`_. Users will receive a notification with no sound."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:13 of
msgid "Protects the contents of the sent messages from forwarding and saving"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:14 of
msgid "If the messages are a reply, ID of the original message"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_media_group_pm:16 of
msgid ""
"instance of method "
":class:`aiogram.methods.send_media_group.SendMediaGroup`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_photo.SendPhoto` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:6 of
msgid ""
"Use this method to send photos. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendphoto"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:10 of
msgid ""
"Photo to send. Pass a file_id as String to send a photo that exists on "
"the Telegram servers (recommended), pass an HTTP URL as a String for "
"Telegram to get a photo from the Internet, or upload a new photo using "
"multipart/form-data. The photo must be at most 10 MB in size. The photo's"
" width and height must not exceed 10000 in total. Width and height ratio "
"must be at most 20. :ref:`More information on Sending Files » <sending-"
"files>`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:12 of
msgid ""
"Photo caption (may also be used when resending photos by *file_id*), "
"0-1024 characters after entities parsing"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:13 of
msgid ""
"Mode for parsing entities in the photo caption. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:15 of
msgid ""
"Pass :code:`True` if the photo needs to be covered with a spoiler "
"animation"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm:21 of
msgid "instance of method :class:`aiogram.methods.send_photo.SendPhoto`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_poll.SendPoll` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:6 of
msgid ""
"Use this method to send a native poll. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendpoll"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:10 of
msgid "Poll question, 1-300 characters"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:11 of
msgid ""
"A JSON-serialized list of answer options, 2-10 strings 1-100 characters "
"each"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:13 of
msgid ":code:`True`, if the poll needs to be anonymous, defaults to :code:`True`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:14 of
msgid "Poll type, 'quiz' or 'regular', defaults to 'regular'"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:15 of
msgid ""
":code:`True`, if the poll allows multiple answers, ignored for polls in "
"quiz mode, defaults to :code:`False`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:16 of
msgid ""
"0-based identifier of the correct answer option, required for polls in "
"quiz mode"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:17 of
msgid ""
"Text that is shown when a user chooses an incorrect answer or taps on the"
" lamp icon in a quiz-style poll, 0-200 characters with at most 2 line "
"feeds after entities parsing"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:18 of
msgid ""
"Mode for parsing entities in the explanation. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:19 of
msgid ""
"A JSON-serialized list of special entities that appear in the poll "
"explanation, which can be specified instead of *parse_mode*"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:20 of
msgid ""
"Amount of time in seconds the poll will be active after creation, 5-600. "
"Can't be used together with *close_date*."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:21 of
msgid ""
"Point in time (Unix timestamp) when the poll will be automatically "
"closed. Must be at least 5 and no more than 600 seconds in the future. "
"Can't be used together with *open_period*."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:22
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:22 of
msgid ""
"Pass :code:`True` if the poll needs to be immediately closed. This can be"
" useful for poll preview."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll:28
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_poll_pm:28 of
msgid "instance of method :class:`aiogram.methods.send_poll.SendPoll`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_dice.SendDice` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:6 of
msgid ""
"Use this method to send an animated emoji that will display a random "
"value. On success, the sent :class:`aiogram.types.message.Message` is "
"returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#senddice"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:11 of
msgid ""
"Emoji on which the dice throw animation is based. Currently, must be one "
"of '🎲', '🎯', '🏀', '⚽', '🎳', or '🎰'. Dice can have values 1-6 for '🎲', '🎯'"
" and '🎳', values 1-5 for '🏀' and '⚽', and values 1-64 for '🎰'. Defaults "
"to '🎲'"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:13 of
msgid "Protects the contents of the sent message from forwarding"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_dice_pm:17 of
msgid "instance of method :class:`aiogram.methods.send_dice.SendDice`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_sticker.SendSticker` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:6 of
msgid ""
"Use this method to send static .WEBP, `animated "
"<https://telegram.org/blog/animated-stickers>`_ .TGS, or `video "
"<https://telegram.org/blog/video-stickers-better-reactions>`_ .WEBM "
"stickers. On success, the sent :class:`aiogram.types.message.Message` is "
"returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendsticker"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:10 of
msgid ""
"Sticker to send. Pass a file_id as String to send a file that exists on "
"the Telegram servers (recommended), pass an HTTP URL as a String for "
"Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP "
"or .TGS sticker using multipart/form-data. :ref:`More information on "
"Sending Files » <sending-files>`. Video stickers can only be sent by a "
"file_id. Animated stickers can't be sent via an HTTP URL."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:12 of
msgid "Emoji associated with the sticker; only for just uploaded stickers"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_sticker_pm:18 of
msgid "instance of method :class:`aiogram.methods.send_sticker.SendSticker`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_venue.SendVenue` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:6 of
msgid ""
"Use this method to send information about a venue. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendvenue"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:10 of
msgid "Latitude of the venue"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:11
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:11 of
msgid "Longitude of the venue"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:12 of
msgid "Name of the venue"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:13 of
msgid "Address of the venue"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:15 of
msgid "Foursquare identifier of the venue"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:16 of
msgid ""
"Foursquare type of the venue, if known. (For example, "
"'arts_entertainment/default', 'arts_entertainment/aquarium' or "
"'food/icecream'.)"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:17 of
msgid "Google Places identifier of the venue"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:18
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:18 of
msgid ""
"Google Places type of the venue. (See `supported types "
"<https://developers.google.com/places/web-service/supported_types>`_.)"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue:24
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_venue_pm:24 of
msgid "instance of method :class:`aiogram.methods.send_venue.SendVenue`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_video.SendVideo` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:6 of
msgid ""
"Use this method to send video files, Telegram clients support MPEG4 "
"videos (other formats may be sent as "
":class:`aiogram.types.document.Document`). On success, the sent "
":class:`aiogram.types.message.Message` is returned. Bots can currently "
"send video files of up to 50 MB in size, this limit may be changed in the"
" future."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendvideo"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:10 of
msgid ""
"Video to send. Pass a file_id as String to send a video that exists on "
"the Telegram servers (recommended), pass an HTTP URL as a String for "
"Telegram to get a video from the Internet, or upload a new video using "
"multipart/form-data. :ref:`More information on Sending Files » <sending-"
"files>`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:12 of
msgid "Duration of sent video in seconds"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:13 of
msgid "Video width"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:14
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:14 of
msgid "Video height"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:16
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:16 of
msgid ""
"Video caption (may also be used when resending videos by *file_id*), "
"0-1024 characters after entities parsing"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:17
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:17 of
msgid ""
"Mode for parsing entities in the video caption. See `formatting options "
"<https://core.telegram.org/bots/api#formatting-options>`_ for more "
"details."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:19
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:19 of
msgid ""
"Pass :code:`True` if the video needs to be covered with a spoiler "
"animation"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:20 of
msgid "Pass :code:`True` if the uploaded video is suitable for streaming"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video:26
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_pm:26 of
msgid "instance of method :class:`aiogram.methods.send_video.SendVideo`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.send_video_note.SendVideoNote` will automatically"
" fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:6 of
msgid ""
"As of `v.4.0 <https://telegram.org/blog/video-messages-and-telescope>`_, "
"Telegram clients support rounded square MPEG4 videos of up to 1 minute "
"long. Use this method to send video messages. On success, the sent "
":class:`aiogram.types.message.Message` is returned."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendvideonote"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:10 of
msgid ""
"Video note to send. Pass a file_id as String to send a video note that "
"exists on the Telegram servers (recommended) or upload a new video using "
"multipart/form-data. :ref:`More information on Sending Files » <sending-"
"files>`. Sending video notes by a URL is currently unsupported"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:13 of
msgid "Video width and height, i.e. diameter of the video message"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note:20
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_video_note_pm:20 of
msgid "instance of method :class:`aiogram.methods.send_video_note.SendVideoNote`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:1
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.send_voice.SendVoice` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:6
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:6 of
msgid ""
"Use this method to send audio files, if you want Telegram clients to "
"display the file as a playable voice message. For this to work, your "
"audio must be in an .OGG file encoded with OPUS (other formats may be "
"sent as :class:`aiogram.types.audio.Audio` or "
":class:`aiogram.types.document.Document`). On success, the sent "
":class:`aiogram.types.message.Message` is returned. Bots can currently "
"send voice messages of up to 50 MB in size, this limit may be changed in "
"the future."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:8
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:8 of
msgid "Source: https://core.telegram.org/bots/api#sendvoice"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:10
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:10 of
msgid ""
"Audio file to send. Pass a file_id as String to send a file that exists "
"on the Telegram servers (recommended), pass an HTTP URL as a String for "
"Telegram to get a file from the Internet, or upload a new one using "
"multipart/form-data. :ref:`More information on Sending Files » <sending-"
"files>`"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:12
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:12 of
msgid "Voice message caption, 0-1024 characters after entities parsing"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:13
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:13 of
msgid ""
"Mode for parsing entities in the voice message caption. See `formatting "
"options <https://core.telegram.org/bots/api#formatting-options>`_ for "
"more details."
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:15
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:15 of
msgid "Duration of the voice message in seconds"
msgstr ""

#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice:21
#: aiogram.types.chat_join_request.ChatJoinRequest.answer_voice_pm:21 of
msgid "instance of method :class:`aiogram.methods.send_voice.SendVoice`"
msgstr ""

#~ msgid "Use this method to approve a chat join request."
#~ msgstr ""

#~ msgid "Use this method to decline a chat join request."
#~ msgstr ""

#~ msgid ""
#~ "Identifier of a private chat with "
#~ "the user who sent the join "
#~ "request. This number may have more "
#~ "than 32 significant bits and some "
#~ "programming languages may have "
#~ "difficulty/silent defects in interpreting it."
#~ " But it has at most 52 "
#~ "significant bits, so a 64-bit integer"
#~ " or double-precision float type are"
#~ " safe for storing this identifier. "
#~ "The bot can use this identifier "
#~ "for 24 hours to send messages "
#~ "until the join request is processed, "
#~ "assuming no other administrator contacted "
#~ "the user."
#~ msgstr ""
