# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-12 00:22+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/types/chat.rst:3
msgid "Chat"
msgstr ""

#: aiogram.types.chat.Chat:1 of
msgid "This object represents a chat."
msgstr ""

#: aiogram.types.chat.Chat:3 of
msgid "Source: https://core.telegram.org/bots/api#chat"
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.id:1 of
msgid ""
"Unique identifier for this chat. This number may have more than 32 "
"significant bits and some programming languages may have "
"difficulty/silent defects in interpreting it. But it has at most 52 "
"significant bits, so a signed 64-bit integer or double-precision float "
"type are safe for storing this identifier."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.type:1 of
msgid "Type of chat, can be either 'private', 'group', 'supergroup' or 'channel'"
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.title:1 of
msgid "*Optional*. Title, for supergroups, channels and group chats"
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.username:1 of
msgid ""
"*Optional*. Username, for private chats, supergroups and channels if "
"available"
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.first_name:1 of
msgid "*Optional*. First name of the other party in a private chat"
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.last_name:1 of
msgid "*Optional*. Last name of the other party in a private chat"
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.is_forum:1 of
msgid ""
"*Optional*. :code:`True`, if the supergroup chat is a forum (has `topics "
"<https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-"
"in-groups>`_ enabled)"
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.photo:1 of
msgid ""
"*Optional*. Chat photo. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.active_usernames:1 of
msgid ""
"*Optional*. If non-empty, the list of all `active chat usernames "
"<https://telegram.org/blog/topics-in-groups-collectible-usernames"
"#collectible-usernames>`_; for private chats, supergroups and channels. "
"Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.emoji_status_custom_emoji_id:1 of
msgid ""
"*Optional*. Custom emoji identifier of emoji status of the other party in"
" a private chat. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.bio:1 of
msgid ""
"*Optional*. Bio of the other party in a private chat. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.has_private_forwards:1 of
msgid ""
"*Optional*. :code:`True`, if privacy settings of the other party in the "
"private chat allows to use :code:`tg://user?id=<user_id>` links only in "
"chats with the user. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring
#: aiogram.types.chat.Chat.has_restricted_voice_and_video_messages:1 of
msgid ""
"*Optional*. :code:`True`, if the privacy settings of the other party "
"restrict sending voice and video note messages in the private chat. "
"Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.join_to_send_messages:1 of
msgid ""
"*Optional*. :code:`True`, if users need to join the supergroup before "
"they can send messages. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.join_by_request:1 of
msgid ""
"*Optional*. :code:`True`, if all users directly joining the supergroup "
"need to be approved by supergroup administrators. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.description:1 of
msgid ""
"*Optional*. Description, for groups, supergroups and channel chats. "
"Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.invite_link:1 of
msgid ""
"*Optional*. Primary invite link, for groups, supergroups and channel "
"chats. Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.pinned_message:1 of
msgid ""
"*Optional*. The most recent pinned message (by sending date). Returned "
"only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.permissions:1 of
msgid ""
"*Optional*. Default chat member permissions, for groups and supergroups. "
"Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.slow_mode_delay:1 of
msgid ""
"*Optional*. For supergroups, the minimum allowed delay between "
"consecutive messages sent by each unpriviledged user; in seconds. "
"Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.message_auto_delete_time:1 of
msgid ""
"*Optional*. The time after which all messages sent to the chat will be "
"automatically deleted; in seconds. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.has_aggressive_anti_spam_enabled:1
#: of
msgid ""
"*Optional*. :code:`True`, if aggressive anti-spam checks are enabled in "
"the supergroup. The field is only available to chat administrators. "
"Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.has_hidden_members:1 of
msgid ""
"*Optional*. :code:`True`, if non-administrators can only get the list of "
"bots and administrators in the chat. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.has_protected_content:1 of
msgid ""
"*Optional*. :code:`True`, if messages from the chat can't be forwarded to"
" other chats. Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.sticker_set_name:1 of
msgid ""
"*Optional*. For supergroups, name of group sticker set. Returned only in "
":class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.can_set_sticker_set:1 of
msgid ""
"*Optional*. :code:`True`, if the bot can change the group sticker set. "
"Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.linked_chat_id:1 of
msgid ""
"*Optional*. Unique identifier for the linked chat, i.e. the discussion "
"group identifier for a channel and vice versa; for supergroups and "
"channel chats. This identifier may be greater than 32 bits and some "
"programming languages may have difficulty/silent defects in interpreting "
"it. But it is smaller than 52 bits, so a signed 64 bit integer or double-"
"precision float type are safe for storing this identifier. Returned only "
"in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: ../../docstring aiogram.types.chat.Chat.location:1 of
msgid ""
"*Optional*. For supergroups, the location to which the supergroup is "
"connected. Returned only in :class:`aiogram.methods.get_chat.GetChat`."
msgstr ""

#: aiogram.types.chat.Chat.shifted_id:1 of
msgid ""
"Returns shifted chat ID (positive and without \"-100\" prefix). Mostly "
"used for private links like t.me/c/chat_id/message_id"
msgstr ""

#: aiogram.types.chat.Chat.shifted_id:4 of
msgid ""
"Currently supergroup/channel IDs have 10-digit ID after \"-100\" prefix "
"removed. However, these IDs might become 11-digit in future. So, first we"
" remove \"-100\" prefix and count remaining number length. Then we "
"multiple -1 * 10 ^ (number_length + 2) Finally, self.id is substracted "
"from that number"
msgstr ""

#: aiogram.types.chat.Chat.full_name:1 of
msgid "Get full name of the Chat."
msgstr ""

#: aiogram.types.chat.Chat.full_name:3 of
msgid ""
"For private chat it is first_name + last_name. For other chat types it is"
" title."
msgstr ""

#: aiogram.types.chat.Chat.ban_sender_chat:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.ban_chat_sender_chat.BanChatSenderChat` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.ban:4 aiogram.types.chat.Chat.ban_sender_chat:4
#: aiogram.types.chat.Chat.create_invite_link:4
#: aiogram.types.chat.Chat.delete_message:4
#: aiogram.types.chat.Chat.delete_photo:4
#: aiogram.types.chat.Chat.delete_sticker_set:4 aiogram.types.chat.Chat.do:4
#: aiogram.types.chat.Chat.edit_invite_link:4
#: aiogram.types.chat.Chat.export_invite_link:4
#: aiogram.types.chat.Chat.get_administrators:4
#: aiogram.types.chat.Chat.get_member:4
#: aiogram.types.chat.Chat.get_member_count:4 aiogram.types.chat.Chat.leave:4
#: aiogram.types.chat.Chat.pin_message:4 aiogram.types.chat.Chat.promote:4
#: aiogram.types.chat.Chat.restrict:4
#: aiogram.types.chat.Chat.revoke_invite_link:4
#: aiogram.types.chat.Chat.set_administrator_custom_title:4
#: aiogram.types.chat.Chat.set_description:4
#: aiogram.types.chat.Chat.set_permissions:4
#: aiogram.types.chat.Chat.set_photo:4
#: aiogram.types.chat.Chat.set_sticker_set:4
#: aiogram.types.chat.Chat.set_title:4 aiogram.types.chat.Chat.unban:4
#: aiogram.types.chat.Chat.unban_sender_chat:4
#: aiogram.types.chat.Chat.unpin_all_messages:4
#: aiogram.types.chat.Chat.unpin_message:4 of
msgid ":code:`chat_id`"
msgstr ""

#: aiogram.types.chat.Chat.ban_sender_chat:6 of
msgid ""
"Use this method to ban a channel chat in a supergroup or a channel. Until"
" the chat is `unbanned "
"<https://core.telegram.org/bots/api#unbanchatsenderchat>`_, the owner of "
"the banned chat won't be able to send messages on behalf of **any of "
"their channels**. The bot must be an administrator in the supergroup or "
"channel for this to work and must have the appropriate administrator "
"rights. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.ban_sender_chat:8 of
msgid "Source: https://core.telegram.org/bots/api#banchatsenderchat"
msgstr ""

#: aiogram.types.chat.Chat.ban aiogram.types.chat.Chat.ban_sender_chat
#: aiogram.types.chat.Chat.create_invite_link
#: aiogram.types.chat.Chat.delete_message aiogram.types.chat.Chat.do
#: aiogram.types.chat.Chat.edit_invite_link aiogram.types.chat.Chat.get_member
#: aiogram.types.chat.Chat.pin_message aiogram.types.chat.Chat.promote
#: aiogram.types.chat.Chat.restrict aiogram.types.chat.Chat.revoke_invite_link
#: aiogram.types.chat.Chat.set_administrator_custom_title
#: aiogram.types.chat.Chat.set_description
#: aiogram.types.chat.Chat.set_permissions aiogram.types.chat.Chat.set_photo
#: aiogram.types.chat.Chat.set_sticker_set aiogram.types.chat.Chat.set_title
#: aiogram.types.chat.Chat.unban aiogram.types.chat.Chat.unban_sender_chat
#: aiogram.types.chat.Chat.unpin_message of
msgid "Parameters"
msgstr ""

#: aiogram.types.chat.Chat.ban_sender_chat:10
#: aiogram.types.chat.Chat.unban_sender_chat:10 of
msgid "Unique identifier of the target sender chat"
msgstr ""

#: aiogram.types.chat.Chat.ban aiogram.types.chat.Chat.ban_sender_chat
#: aiogram.types.chat.Chat.create_invite_link
#: aiogram.types.chat.Chat.delete_message aiogram.types.chat.Chat.delete_photo
#: aiogram.types.chat.Chat.delete_sticker_set aiogram.types.chat.Chat.do
#: aiogram.types.chat.Chat.edit_invite_link
#: aiogram.types.chat.Chat.export_invite_link
#: aiogram.types.chat.Chat.get_administrators
#: aiogram.types.chat.Chat.get_member aiogram.types.chat.Chat.get_member_count
#: aiogram.types.chat.Chat.leave aiogram.types.chat.Chat.pin_message
#: aiogram.types.chat.Chat.promote aiogram.types.chat.Chat.restrict
#: aiogram.types.chat.Chat.revoke_invite_link
#: aiogram.types.chat.Chat.set_administrator_custom_title
#: aiogram.types.chat.Chat.set_description
#: aiogram.types.chat.Chat.set_permissions aiogram.types.chat.Chat.set_photo
#: aiogram.types.chat.Chat.set_sticker_set aiogram.types.chat.Chat.set_title
#: aiogram.types.chat.Chat.unban aiogram.types.chat.Chat.unban_sender_chat
#: aiogram.types.chat.Chat.unpin_all_messages
#: aiogram.types.chat.Chat.unpin_message of
msgid "Returns"
msgstr ""

#: aiogram.types.chat.Chat.ban_sender_chat:11 of
msgid ""
"instance of method "
":class:`aiogram.methods.ban_chat_sender_chat.BanChatSenderChat`"
msgstr ""

#: aiogram.types.chat.Chat.unban_sender_chat:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.unban_chat_sender_chat.UnbanChatSenderChat` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.unban_sender_chat:6 of
msgid ""
"Use this method to unban a previously banned channel chat in a supergroup"
" or channel. The bot must be an administrator for this to work and must "
"have the appropriate administrator rights. Returns :code:`True` on "
"success."
msgstr ""

#: aiogram.types.chat.Chat.unban_sender_chat:8 of
msgid "Source: https://core.telegram.org/bots/api#unbanchatsenderchat"
msgstr ""

#: aiogram.types.chat.Chat.unban_sender_chat:11 of
msgid ""
"instance of method "
":class:`aiogram.methods.unban_chat_sender_chat.UnbanChatSenderChat`"
msgstr ""

#: aiogram.types.chat.Chat.get_administrators:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.get_chat_administrators.GetChatAdministrators` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.get_administrators:6 of
msgid ""
"Use this method to get a list of administrators in a chat, which aren't "
"bots. Returns an Array of :class:`aiogram.types.chat_member.ChatMember` "
"objects."
msgstr ""

#: aiogram.types.chat.Chat.get_administrators:8 of
msgid "Source: https://core.telegram.org/bots/api#getchatadministrators"
msgstr ""

#: aiogram.types.chat.Chat.get_administrators:10 of
msgid ""
"instance of method "
":class:`aiogram.methods.get_chat_administrators.GetChatAdministrators`"
msgstr ""

#: aiogram.types.chat.Chat.delete_message:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.delete_message.DeleteMessage`"
" will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.delete_message:6 of
msgid ""
"Use this method to delete a message, including service messages, with the"
" following limitations:"
msgstr ""

#: aiogram.types.chat.Chat.delete_message:8 of
msgid "A message can only be deleted if it was sent less than 48 hours ago."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:10 of
msgid ""
"Service messages about a supergroup, channel, or forum topic creation "
"can't be deleted."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:12 of
msgid ""
"A dice message in a private chat can only be deleted if it was sent more "
"than 24 hours ago."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:14 of
msgid ""
"Bots can delete outgoing messages in private chats, groups, and "
"supergroups."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:16 of
msgid "Bots can delete incoming messages in private chats."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:18 of
msgid ""
"Bots granted *can_post_messages* permissions can delete outgoing messages"
" in channels."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:20 of
msgid ""
"If the bot is an administrator of a group, it can delete any message "
"there."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:22 of
msgid ""
"If the bot has *can_delete_messages* permission in a supergroup or a "
"channel, it can delete any message there."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:24 of
msgid "Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.delete_message:26 of
msgid "Source: https://core.telegram.org/bots/api#deletemessage"
msgstr ""

#: aiogram.types.chat.Chat.delete_message:28 of
msgid "Identifier of the message to delete"
msgstr ""

#: aiogram.types.chat.Chat.delete_message:29 of
msgid "instance of method :class:`aiogram.methods.delete_message.DeleteMessage`"
msgstr ""

#: aiogram.types.chat.Chat.revoke_invite_link:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.revoke_chat_invite_link.RevokeChatInviteLink` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.revoke_invite_link:6 of
msgid ""
"Use this method to revoke an invite link created by the bot. If the "
"primary link is revoked, a new link is automatically generated. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. Returns the revoked invite link as "
":class:`aiogram.types.chat_invite_link.ChatInviteLink` object."
msgstr ""

#: aiogram.types.chat.Chat.revoke_invite_link:8 of
msgid "Source: https://core.telegram.org/bots/api#revokechatinvitelink"
msgstr ""

#: aiogram.types.chat.Chat.revoke_invite_link:10 of
msgid "The invite link to revoke"
msgstr ""

#: aiogram.types.chat.Chat.revoke_invite_link:11 of
msgid ""
"instance of method "
":class:`aiogram.methods.revoke_chat_invite_link.RevokeChatInviteLink`"
msgstr ""

#: aiogram.types.chat.Chat.edit_invite_link:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.edit_chat_invite_link.EditChatInviteLink` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.edit_invite_link:6 of
msgid ""
"Use this method to edit a non-primary invite link created by the bot. The"
" bot must be an administrator in the chat for this to work and must have "
"the appropriate administrator rights. Returns the edited invite link as a"
" :class:`aiogram.types.chat_invite_link.ChatInviteLink` object."
msgstr ""

#: aiogram.types.chat.Chat.edit_invite_link:8 of
msgid "Source: https://core.telegram.org/bots/api#editchatinvitelink"
msgstr ""

#: aiogram.types.chat.Chat.edit_invite_link:10 of
msgid "The invite link to edit"
msgstr ""

#: aiogram.types.chat.Chat.create_invite_link:10
#: aiogram.types.chat.Chat.edit_invite_link:11 of
msgid "Invite link name; 0-32 characters"
msgstr ""

#: aiogram.types.chat.Chat.create_invite_link:11
#: aiogram.types.chat.Chat.edit_invite_link:12 of
msgid "Point in time (Unix timestamp) when the link will expire"
msgstr ""

#: aiogram.types.chat.Chat.create_invite_link:12
#: aiogram.types.chat.Chat.edit_invite_link:13 of
msgid ""
"The maximum number of users that can be members of the chat "
"simultaneously after joining the chat via this invite link; 1-99999"
msgstr ""

#: aiogram.types.chat.Chat.create_invite_link:13
#: aiogram.types.chat.Chat.edit_invite_link:14 of
msgid ""
":code:`True`, if users joining the chat via the link need to be approved "
"by chat administrators. If :code:`True`, *member_limit* can't be "
"specified"
msgstr ""

#: aiogram.types.chat.Chat.edit_invite_link:15 of
msgid ""
"instance of method "
":class:`aiogram.methods.edit_chat_invite_link.EditChatInviteLink`"
msgstr ""

#: aiogram.types.chat.Chat.create_invite_link:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.create_chat_invite_link.CreateChatInviteLink` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.create_invite_link:6 of
msgid ""
"Use this method to create an additional invite link for a chat. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. The link can be revoked using the "
"method "
":class:`aiogram.methods.revoke_chat_invite_link.RevokeChatInviteLink`. "
"Returns the new invite link as "
":class:`aiogram.types.chat_invite_link.ChatInviteLink` object."
msgstr ""

#: aiogram.types.chat.Chat.create_invite_link:8 of
msgid "Source: https://core.telegram.org/bots/api#createchatinvitelink"
msgstr ""

#: aiogram.types.chat.Chat.create_invite_link:14 of
msgid ""
"instance of method "
":class:`aiogram.methods.create_chat_invite_link.CreateChatInviteLink`"
msgstr ""

#: aiogram.types.chat.Chat.export_invite_link:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.export_chat_invite_link.ExportChatInviteLink` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.export_invite_link:6 of
msgid ""
"Use this method to generate a new primary invite link for a chat; any "
"previously generated primary link is revoked. The bot must be an "
"administrator in the chat for this to work and must have the appropriate "
"administrator rights. Returns the new invite link as *String* on success."
msgstr ""

#: aiogram.types.chat.Chat.export_invite_link:8 of
msgid ""
"Note: Each administrator in a chat generates their own invite links. Bots"
" can't use invite links generated by other administrators. If you want "
"your bot to work with invite links, it will need to generate its own link"
" using "
":class:`aiogram.methods.export_chat_invite_link.ExportChatInviteLink` or "
"by calling the :class:`aiogram.methods.get_chat.GetChat` method. If your "
"bot needs to generate a new primary invite link replacing its previous "
"one, use "
":class:`aiogram.methods.export_chat_invite_link.ExportChatInviteLink` "
"again."
msgstr ""

#: aiogram.types.chat.Chat.export_invite_link:10 of
msgid "Source: https://core.telegram.org/bots/api#exportchatinvitelink"
msgstr ""

#: aiogram.types.chat.Chat.export_invite_link:12 of
msgid ""
"instance of method "
":class:`aiogram.methods.export_chat_invite_link.ExportChatInviteLink`"
msgstr ""

#: aiogram.types.chat.Chat.do:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.send_chat_action.SendChatAction` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.do:6 of
msgid ""
"Use this method when you need to tell the user that something is "
"happening on the bot's side. The status is set for 5 seconds or less "
"(when a message arrives from your bot, Telegram clients clear its typing "
"status). Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.do:8 of
msgid ""
"Example: The `ImageBot <https://t.me/imagebot>`_ needs some time to "
"process a request and upload the image. Instead of sending a text message"
" along the lines of 'Retrieving image, please wait…', the bot may use "
":class:`aiogram.methods.send_chat_action.SendChatAction` with *action* = "
"*upload_photo*. The user will see a 'sending photo' status for the bot."
msgstr ""

#: aiogram.types.chat.Chat.do:10 of
msgid ""
"We only recommend using this method when a response from the bot will "
"take a **noticeable** amount of time to arrive."
msgstr ""

#: aiogram.types.chat.Chat.do:12 of
msgid "Source: https://core.telegram.org/bots/api#sendchataction"
msgstr ""

#: aiogram.types.chat.Chat.do:14 of
msgid ""
"Type of action to broadcast. Choose one, depending on what the user is "
"about to receive: *typing* for `text messages "
"<https://core.telegram.org/bots/api#sendmessage>`_, *upload_photo* for "
"`photos <https://core.telegram.org/bots/api#sendphoto>`_, *record_video* "
"or *upload_video* for `videos "
"<https://core.telegram.org/bots/api#sendvideo>`_, *record_voice* or "
"*upload_voice* for `voice notes "
"<https://core.telegram.org/bots/api#sendvoice>`_, *upload_document* for "
"`general files <https://core.telegram.org/bots/api#senddocument>`_, "
"*choose_sticker* for `stickers "
"<https://core.telegram.org/bots/api#sendsticker>`_, *find_location* for "
"`location data <https://core.telegram.org/bots/api#sendlocation>`_, "
"*record_video_note* or *upload_video_note* for `video notes "
"<https://core.telegram.org/bots/api#sendvideonote>`_."
msgstr ""

#: aiogram.types.chat.Chat.do:15 of
msgid "Unique identifier for the target message thread; supergroups only"
msgstr ""

#: aiogram.types.chat.Chat.do:16 of
msgid ""
"instance of method "
":class:`aiogram.methods.send_chat_action.SendChatAction`"
msgstr ""

#: aiogram.types.chat.Chat.delete_sticker_set:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.delete_chat_sticker_set.DeleteChatStickerSet` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.delete_sticker_set:6 of
msgid ""
"Use this method to delete a group sticker set from a supergroup. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. Use the field *can_set_sticker_set* "
"optionally returned in :class:`aiogram.methods.get_chat.GetChat` requests"
" to check if the bot can use this method. Returns :code:`True` on "
"success."
msgstr ""

#: aiogram.types.chat.Chat.delete_sticker_set:8 of
msgid "Source: https://core.telegram.org/bots/api#deletechatstickerset"
msgstr ""

#: aiogram.types.chat.Chat.delete_sticker_set:10 of
msgid ""
"instance of method "
":class:`aiogram.methods.delete_chat_sticker_set.DeleteChatStickerSet`"
msgstr ""

#: aiogram.types.chat.Chat.set_sticker_set:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.set_chat_sticker_set.SetChatStickerSet` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.set_sticker_set:6 of
msgid ""
"Use this method to set a new group sticker set for a supergroup. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. Use the field *can_set_sticker_set* "
"optionally returned in :class:`aiogram.methods.get_chat.GetChat` requests"
" to check if the bot can use this method. Returns :code:`True` on "
"success."
msgstr ""

#: aiogram.types.chat.Chat.set_sticker_set:8 of
msgid "Source: https://core.telegram.org/bots/api#setchatstickerset"
msgstr ""

#: aiogram.types.chat.Chat.set_sticker_set:10 of
msgid "Name of the sticker set to be set as the group sticker set"
msgstr ""

#: aiogram.types.chat.Chat.set_sticker_set:11 of
msgid ""
"instance of method "
":class:`aiogram.methods.set_chat_sticker_set.SetChatStickerSet`"
msgstr ""

#: aiogram.types.chat.Chat.get_member:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.get_chat_member.GetChatMember` will automatically"
" fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.get_member:6 of
msgid ""
"Use this method to get information about a member of a chat. The method "
"is only guaranteed to work for other users if the bot is an administrator"
" in the chat. Returns a :class:`aiogram.types.chat_member.ChatMember` "
"object on success."
msgstr ""

#: aiogram.types.chat.Chat.get_member:8 of
msgid "Source: https://core.telegram.org/bots/api#getchatmember"
msgstr ""

#: aiogram.types.chat.Chat.ban:10 aiogram.types.chat.Chat.get_member:10
#: aiogram.types.chat.Chat.promote:10 aiogram.types.chat.Chat.restrict:10
#: aiogram.types.chat.Chat.set_administrator_custom_title:10
#: aiogram.types.chat.Chat.unban:10 of
msgid "Unique identifier of the target user"
msgstr ""

#: aiogram.types.chat.Chat.get_member:11 of
msgid "instance of method :class:`aiogram.methods.get_chat_member.GetChatMember`"
msgstr ""

#: aiogram.types.chat.Chat.get_member_count:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.get_chat_member_count.GetChatMemberCount` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.get_member_count:6 of
msgid ""
"Use this method to get the number of members in a chat. Returns *Int* on "
"success."
msgstr ""

#: aiogram.types.chat.Chat.get_member_count:8 of
msgid "Source: https://core.telegram.org/bots/api#getchatmembercount"
msgstr ""

#: aiogram.types.chat.Chat.get_member_count:10 of
msgid ""
"instance of method "
":class:`aiogram.methods.get_chat_member_count.GetChatMemberCount`"
msgstr ""

#: aiogram.types.chat.Chat.leave:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.leave_chat.LeaveChat` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.leave:6 of
msgid ""
"Use this method for your bot to leave a group, supergroup or channel. "
"Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.leave:8 of
msgid "Source: https://core.telegram.org/bots/api#leavechat"
msgstr ""

#: aiogram.types.chat.Chat.leave:10 of
msgid "instance of method :class:`aiogram.methods.leave_chat.LeaveChat`"
msgstr ""

#: aiogram.types.chat.Chat.unpin_all_messages:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.unpin_all_chat_messages.UnpinAllChatMessages` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.unpin_all_messages:6 of
msgid ""
"Use this method to clear the list of pinned messages in a chat. If the "
"chat is not a private chat, the bot must be an administrator in the chat "
"for this to work and must have the 'can_pin_messages' administrator right"
" in a supergroup or 'can_edit_messages' administrator right in a channel."
" Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.unpin_all_messages:8 of
msgid "Source: https://core.telegram.org/bots/api#unpinallchatmessages"
msgstr ""

#: aiogram.types.chat.Chat.unpin_all_messages:10 of
msgid ""
"instance of method "
":class:`aiogram.methods.unpin_all_chat_messages.UnpinAllChatMessages`"
msgstr ""

#: aiogram.types.chat.Chat.unpin_message:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.unpin_chat_message.UnpinChatMessage` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.unpin_message:6 of
msgid ""
"Use this method to remove a message from the list of pinned messages in a"
" chat. If the chat is not a private chat, the bot must be an "
"administrator in the chat for this to work and must have the "
"'can_pin_messages' administrator right in a supergroup or "
"'can_edit_messages' administrator right in a channel. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.unpin_message:8 of
msgid "Source: https://core.telegram.org/bots/api#unpinchatmessage"
msgstr ""

#: aiogram.types.chat.Chat.unpin_message:10 of
msgid ""
"Identifier of a message to unpin. If not specified, the most recent "
"pinned message (by sending date) will be unpinned."
msgstr ""

#: aiogram.types.chat.Chat.unpin_message:11 of
msgid ""
"instance of method "
":class:`aiogram.methods.unpin_chat_message.UnpinChatMessage`"
msgstr ""

#: aiogram.types.chat.Chat.pin_message:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.pin_chat_message.PinChatMessage` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.pin_message:6 of
msgid ""
"Use this method to add a message to the list of pinned messages in a "
"chat. If the chat is not a private chat, the bot must be an administrator"
" in the chat for this to work and must have the 'can_pin_messages' "
"administrator right in a supergroup or 'can_edit_messages' administrator "
"right in a channel. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.pin_message:8 of
msgid "Source: https://core.telegram.org/bots/api#pinchatmessage"
msgstr ""

#: aiogram.types.chat.Chat.pin_message:10 of
msgid "Identifier of a message to pin"
msgstr ""

#: aiogram.types.chat.Chat.pin_message:11 of
msgid ""
"Pass :code:`True` if it is not necessary to send a notification to all "
"chat members about the new pinned message. Notifications are always "
"disabled in channels and private chats."
msgstr ""

#: aiogram.types.chat.Chat.pin_message:12 of
msgid ""
"instance of method "
":class:`aiogram.methods.pin_chat_message.PinChatMessage`"
msgstr ""

#: aiogram.types.chat.Chat.set_administrator_custom_title:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.set_chat_administrator_custom_title.SetChatAdministratorCustomTitle`"
" will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.set_administrator_custom_title:6 of
msgid ""
"Use this method to set a custom title for an administrator in a "
"supergroup promoted by the bot. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.set_administrator_custom_title:8 of
msgid "Source: https://core.telegram.org/bots/api#setchatadministratorcustomtitle"
msgstr ""

#: aiogram.types.chat.Chat.set_administrator_custom_title:11 of
msgid ""
"New custom title for the administrator; 0-16 characters, emoji are not "
"allowed"
msgstr ""

#: aiogram.types.chat.Chat.set_administrator_custom_title:12 of
msgid ""
"instance of method "
":class:`aiogram.methods.set_chat_administrator_custom_title.SetChatAdministratorCustomTitle`"
msgstr ""

#: aiogram.types.chat.Chat.set_permissions:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.set_chat_permissions.SetChatPermissions` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.set_permissions:6 of
msgid ""
"Use this method to set default chat permissions for all members. The bot "
"must be an administrator in the group or a supergroup for this to work "
"and must have the *can_restrict_members* administrator rights. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.set_permissions:8 of
msgid "Source: https://core.telegram.org/bots/api#setchatpermissions"
msgstr ""

#: aiogram.types.chat.Chat.set_permissions:10 of
msgid "A JSON-serialized object for new default chat permissions"
msgstr ""

#: aiogram.types.chat.Chat.restrict:12
#: aiogram.types.chat.Chat.set_permissions:11 of
msgid ""
"Pass :code:`True` if chat permissions are set independently. Otherwise, "
"the *can_send_other_messages* and *can_add_web_page_previews* permissions"
" will imply the *can_send_messages*, *can_send_audios*, "
"*can_send_documents*, *can_send_photos*, *can_send_videos*, "
"*can_send_video_notes*, and *can_send_voice_notes* permissions; the "
"*can_send_polls* permission will imply the *can_send_messages* "
"permission."
msgstr ""

#: aiogram.types.chat.Chat.set_permissions:12 of
msgid ""
"instance of method "
":class:`aiogram.methods.set_chat_permissions.SetChatPermissions`"
msgstr ""

#: aiogram.types.chat.Chat.promote:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.promote_chat_member.PromoteChatMember` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.promote:6 of
msgid ""
"Use this method to promote or demote a user in a supergroup or a channel."
" The bot must be an administrator in the chat for this to work and must "
"have the appropriate administrator rights. Pass :code:`False` for all "
"boolean parameters to demote a user. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.promote:8 of
msgid "Source: https://core.telegram.org/bots/api#promotechatmember"
msgstr ""

#: aiogram.types.chat.Chat.promote:11 of
msgid "Pass :code:`True` if the administrator's presence in the chat is hidden"
msgstr ""

#: aiogram.types.chat.Chat.promote:12 of
msgid ""
"Pass :code:`True` if the administrator can access the chat event log, "
"chat statistics, message statistics in channels, see channel members, see"
" anonymous administrators in supergroups and ignore slow mode. Implied by"
" any other administrator privilege"
msgstr ""

#: aiogram.types.chat.Chat.promote:13 of
msgid ""
"Pass :code:`True` if the administrator can create channel posts, channels"
" only"
msgstr ""

#: aiogram.types.chat.Chat.promote:14 of
msgid ""
"Pass :code:`True` if the administrator can edit messages of other users "
"and can pin messages, channels only"
msgstr ""

#: aiogram.types.chat.Chat.promote:15 of
msgid "Pass :code:`True` if the administrator can delete messages of other users"
msgstr ""

#: aiogram.types.chat.Chat.promote:16 of
msgid "Pass :code:`True` if the administrator can manage video chats"
msgstr ""

#: aiogram.types.chat.Chat.promote:17 of
msgid ""
"Pass :code:`True` if the administrator can restrict, ban or unban chat "
"members"
msgstr ""

#: aiogram.types.chat.Chat.promote:18 of
msgid ""
"Pass :code:`True` if the administrator can add new administrators with a "
"subset of their own privileges or demote administrators that they have "
"promoted, directly or indirectly (promoted by administrators that were "
"appointed by him)"
msgstr ""

#: aiogram.types.chat.Chat.promote:19 of
msgid ""
"Pass :code:`True` if the administrator can change chat title, photo and "
"other settings"
msgstr ""

#: aiogram.types.chat.Chat.promote:20 of
msgid "Pass :code:`True` if the administrator can invite new users to the chat"
msgstr ""

#: aiogram.types.chat.Chat.promote:21 of
msgid "Pass :code:`True` if the administrator can pin messages, supergroups only"
msgstr ""

#: aiogram.types.chat.Chat.promote:22 of
msgid ""
"Pass :code:`True` if the user is allowed to create, rename, close, and "
"reopen forum topics, supergroups only"
msgstr ""

#: aiogram.types.chat.Chat.promote:23 of
msgid ""
"instance of method "
":class:`aiogram.methods.promote_chat_member.PromoteChatMember`"
msgstr ""

#: aiogram.types.chat.Chat.restrict:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.restrict_chat_member.RestrictChatMember` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.restrict:6 of
msgid ""
"Use this method to restrict a user in a supergroup. The bot must be an "
"administrator in the supergroup for this to work and must have the "
"appropriate administrator rights. Pass :code:`True` for all permissions "
"to lift restrictions from a user. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.restrict:8 of
msgid "Source: https://core.telegram.org/bots/api#restrictchatmember"
msgstr ""

#: aiogram.types.chat.Chat.restrict:11 of
msgid "A JSON-serialized object for new user permissions"
msgstr ""

#: aiogram.types.chat.Chat.restrict:13 of
msgid ""
"Date when restrictions will be lifted for the user, unix time. If user is"
" restricted for more than 366 days or less than 30 seconds from the "
"current time, they are considered to be restricted forever"
msgstr ""

#: aiogram.types.chat.Chat.restrict:14 of
msgid ""
"instance of method "
":class:`aiogram.methods.restrict_chat_member.RestrictChatMember`"
msgstr ""

#: aiogram.types.chat.Chat.unban:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.unban_chat_member.UnbanChatMember` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.unban:6 of
msgid ""
"Use this method to unban a previously banned user in a supergroup or "
"channel. The user will **not** return to the group or channel "
"automatically, but will be able to join via link, etc. The bot must be an"
" administrator for this to work. By default, this method guarantees that "
"after the call the user is not a member of the chat, but will be able to "
"join it. So if the user is a member of the chat they will also be "
"**removed** from the chat. If you don't want this, use the parameter "
"*only_if_banned*. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.unban:8 of
msgid "Source: https://core.telegram.org/bots/api#unbanchatmember"
msgstr ""

#: aiogram.types.chat.Chat.unban:11 of
msgid "Do nothing if the user is not banned"
msgstr ""

#: aiogram.types.chat.Chat.unban:12 of
msgid ""
"instance of method "
":class:`aiogram.methods.unban_chat_member.UnbanChatMember`"
msgstr ""

#: aiogram.types.chat.Chat.ban:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.ban_chat_member.BanChatMember` will automatically"
" fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.ban:6 of
msgid ""
"Use this method to ban a user in a group, a supergroup or a channel. In "
"the case of supergroups and channels, the user will not be able to return"
" to the chat on their own using invite links, etc., unless `unbanned "
"<https://core.telegram.org/bots/api#unbanchatmember>`_ first. The bot "
"must be an administrator in the chat for this to work and must have the "
"appropriate administrator rights. Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.ban:8 of
msgid "Source: https://core.telegram.org/bots/api#banchatmember"
msgstr ""

#: aiogram.types.chat.Chat.ban:11 of
msgid ""
"Date when the user will be unbanned, unix time. If user is banned for "
"more than 366 days or less than 30 seconds from the current time they are"
" considered to be banned forever. Applied for supergroups and channels "
"only."
msgstr ""

#: aiogram.types.chat.Chat.ban:12 of
msgid ""
"Pass :code:`True` to delete all messages from the chat for the user that "
"is being removed. If :code:`False`, the user will be able to see messages"
" in the group that were sent before the user was removed. Always "
":code:`True` for supergroups and channels."
msgstr ""

#: aiogram.types.chat.Chat.ban:13 of
msgid "instance of method :class:`aiogram.methods.ban_chat_member.BanChatMember`"
msgstr ""

#: aiogram.types.chat.Chat.set_description:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.set_chat_description.SetChatDescription` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.set_description:6 of
msgid ""
"Use this method to change the description of a group, a supergroup or a "
"channel. The bot must be an administrator in the chat for this to work "
"and must have the appropriate administrator rights. Returns :code:`True` "
"on success."
msgstr ""

#: aiogram.types.chat.Chat.set_description:8 of
msgid "Source: https://core.telegram.org/bots/api#setchatdescription"
msgstr ""

#: aiogram.types.chat.Chat.set_description:10 of
msgid "New chat description, 0-255 characters"
msgstr ""

#: aiogram.types.chat.Chat.set_description:11 of
msgid ""
"instance of method "
":class:`aiogram.methods.set_chat_description.SetChatDescription`"
msgstr ""

#: aiogram.types.chat.Chat.set_title:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.set_chat_title.SetChatTitle` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.set_title:6 of
msgid ""
"Use this method to change the title of a chat. Titles can't be changed "
"for private chats. The bot must be an administrator in the chat for this "
"to work and must have the appropriate administrator rights. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.set_title:8 of
msgid "Source: https://core.telegram.org/bots/api#setchattitle"
msgstr ""

#: aiogram.types.chat.Chat.set_title:10 of
msgid "New chat title, 1-128 characters"
msgstr ""

#: aiogram.types.chat.Chat.set_title:11 of
msgid "instance of method :class:`aiogram.methods.set_chat_title.SetChatTitle`"
msgstr ""

#: aiogram.types.chat.Chat.delete_photo:1 of
msgid ""
"Shortcut for method "
":class:`aiogram.methods.delete_chat_photo.DeleteChatPhoto` will "
"automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.delete_photo:6 of
msgid ""
"Use this method to delete a chat photo. Photos can't be changed for "
"private chats. The bot must be an administrator in the chat for this to "
"work and must have the appropriate administrator rights. Returns "
":code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.delete_photo:8 of
msgid "Source: https://core.telegram.org/bots/api#deletechatphoto"
msgstr ""

#: aiogram.types.chat.Chat.delete_photo:10 of
msgid ""
"instance of method "
":class:`aiogram.methods.delete_chat_photo.DeleteChatPhoto`"
msgstr ""

#: aiogram.types.chat.Chat.set_photo:1 of
msgid ""
"Shortcut for method :class:`aiogram.methods.set_chat_photo.SetChatPhoto` "
"will automatically fill method attributes:"
msgstr ""

#: aiogram.types.chat.Chat.set_photo:6 of
msgid ""
"Use this method to set a new profile photo for the chat. Photos can't be "
"changed for private chats. The bot must be an administrator in the chat "
"for this to work and must have the appropriate administrator rights. "
"Returns :code:`True` on success."
msgstr ""

#: aiogram.types.chat.Chat.set_photo:8 of
msgid "Source: https://core.telegram.org/bots/api#setchatphoto"
msgstr ""

#: aiogram.types.chat.Chat.set_photo:10 of
msgid "New chat photo, uploaded using multipart/form-data"
msgstr ""

#: aiogram.types.chat.Chat.set_photo:11 of
msgid "instance of method :class:`aiogram.methods.set_chat_photo.SetChatPhoto`"
msgstr ""

#~ msgid ""
#~ "Use this method to get information "
#~ "about a member of a chat. The "
#~ "method is guaranteed to work for "
#~ "other users, only if the bot is"
#~ " an administrator in the chat. "
#~ "Returns a :class:`aiogram.types.chat_member.ChatMember`"
#~ " object on success."
#~ msgstr ""

#~ msgid ""
#~ "Pass :code:`True` if the administrator "
#~ "can add new administrators with a "
#~ "subset of their own privileges or "
#~ "demote administrators that he has "
#~ "promoted, directly or indirectly (promoted "
#~ "by administrators that were appointed by"
#~ " him)"
#~ msgstr ""

