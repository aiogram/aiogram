# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 23:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../dispatcher/filters/text.rst:3
msgid "Text"
msgstr ""

#: aiogram.filters.text.Text:1 of
msgid ""
"Is useful for filtering text :class:`aiogram.types.message.Message`, any "
":class:`aiogram.types.callback_query.CallbackQuery` with `data`, "
":class:`aiogram.types.inline_query.InlineQuery` or "
":class:`aiogram.types.poll.Poll` question."
msgstr ""

#: aiogram.filters.text.Text:7 of
msgid ""
"Only one of `text`, `contains`, `startswith` or `endswith` argument can "
"be used at once. Any of that arguments can be string, list, set or tuple "
"of strings."
msgstr ""

#: aiogram.filters.text.Text:12 of
msgid ""
"use :ref:`magic-filter <magic-filters>`. For example do :pycode:`F.text "
"== \"text\"` instead"
msgstr ""

#: ../../dispatcher/filters/text.rst:10
msgid "Can be imported:"
msgstr ""

#: ../../dispatcher/filters/text.rst:12
msgid ":code:`from aiogram.filters.text import Text`"
msgstr ""

#: ../../dispatcher/filters/text.rst:13
msgid ":code:`from aiogram.filters import Text`"
msgstr ""

#: ../../dispatcher/filters/text.rst:16
msgid "Usage"
msgstr ""

#: ../../dispatcher/filters/text.rst:18
msgid ""
"Text equals with the specified value: :code:`Text(text=\"text\")  # value"
" == 'text'`"
msgstr ""

#: ../../dispatcher/filters/text.rst:19
msgid ""
"Text starts with the specified value: :code:`Text(startswith=\"text\")  #"
" value.startswith('text')`"
msgstr ""

#: ../../dispatcher/filters/text.rst:20
msgid ""
"Text ends with the specified value: :code:`Text(endswith=\"text\")  # "
"value.endswith('text')`"
msgstr ""

#: ../../dispatcher/filters/text.rst:21
msgid ""
"Text contains the specified value: :code:`Text(contains=\"text\")  # "
"value in 'text'`"
msgstr ""

#: ../../dispatcher/filters/text.rst:22
msgid ""
"Any of previous listed filters can be list, set or tuple of strings "
"that's mean any of listed value should be "
"equals/startswith/endswith/contains: :code:`Text(text=[\"text\", "
"\"spam\"])`"
msgstr ""

#: ../../dispatcher/filters/text.rst:23
msgid ""
"Ignore case can be combined with any previous listed filter: "
":code:`Text(text=\"Text\", ignore_case=True)  # value.lower() == "
"'text'.lower()`"
msgstr ""

#: ../../dispatcher/filters/text.rst:26
msgid "Allowed handlers"
msgstr ""

#: ../../dispatcher/filters/text.rst:28
msgid "Allowed update types for this filter:"
msgstr ""

#: ../../dispatcher/filters/text.rst:30
msgid ":code:`message`"
msgstr ""

#: ../../dispatcher/filters/text.rst:31
msgid ":code:`edited_message`"
msgstr ""

#: ../../dispatcher/filters/text.rst:32
msgid ":code:`channel_post`"
msgstr ""

#: ../../dispatcher/filters/text.rst:33
msgid ":code:`edited_channel_post`"
msgstr ""

#: ../../dispatcher/filters/text.rst:34
msgid ":code:`inline_query`"
msgstr ""

#: ../../dispatcher/filters/text.rst:35
msgid ":code:`callback_query`"
msgstr ""
