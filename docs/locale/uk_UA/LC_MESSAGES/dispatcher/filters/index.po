# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-01 22:51+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../dispatcher/filters/index.rst:3
msgid "Filtering events"
msgstr ""

#: ../../dispatcher/filters/index.rst:5
msgid ""
"Filters is needed for routing updates to the specific handler. Searching "
"of handler is always stops on first match set of filters are pass."
msgstr ""

#: ../../dispatcher/filters/index.rst:8
msgid "*aiogram* has some builtin useful filters."
msgstr ""

#: ../../dispatcher/filters/index.rst:11
msgid "Builtin filters"
msgstr ""

#: ../../dispatcher/filters/index.rst:13
msgid "Here is list of builtin filters:"
msgstr ""

#: ../../dispatcher/filters/index.rst:27
msgid "Writing own filters"
msgstr ""

#: ../../dispatcher/filters/index.rst:29
msgid "Filters can be:"
msgstr ""

#: ../../dispatcher/filters/index.rst:31
msgid "Asynchronous function (:code:`async def my_filter(*args, **kwargs): pass`)"
msgstr ""

#: ../../dispatcher/filters/index.rst:32
msgid "Synchronous function (:code:`def my_filter(*args, **kwargs): pass`)"
msgstr ""

#: ../../dispatcher/filters/index.rst:33
msgid "Anonymous function (:code:`lambda event: True`)"
msgstr ""

#: ../../dispatcher/filters/index.rst:34
msgid "Any awaitable object"
msgstr ""

#: ../../dispatcher/filters/index.rst:35
msgid "Subclass of :class:`aiogram.filters.base.Filter`"
msgstr ""

#: ../../dispatcher/filters/index.rst:36
msgid "Instances of :ref:`MagicFilter <magic-filters>`"
msgstr ""

#: ../../dispatcher/filters/index.rst:38
msgid ""
"and should return bool or dict. If the dictionary is passed as result of "
"filter - resulted data will be propagated to the next filters and handler"
" as keywords arguments."
msgstr ""

#: ../../dispatcher/filters/index.rst:43
msgid "Base class for own filters"
msgstr ""

#: aiogram.filters.base.Filter:1 of
msgid ""
"If you want to register own filters like builtin filters you will need to"
" write subclass of this class with overriding the :code:`__call__` method"
" and adding filter attributes."
msgstr ""

#: aiogram.filters.base.Filter.__call__:1 of
msgid "This method should be overridden."
msgstr ""

#: aiogram.filters.base.Filter.__call__:3 of
msgid "Accepts incoming event and should return boolean or dict."
msgstr ""

#: aiogram.filters.base.Filter.__call__ of
msgid "Returns"
msgstr ""

#: aiogram.filters.base.Filter.__call__:5 of
msgid ":class:`bool` or :class:`Dict[str, Any]`"
msgstr ""

#: aiogram.filters.base.Filter.update_handler_flags:1 of
msgid ""
"Also if you want to extend handler flags with using this filter you "
"should implement this method"
msgstr ""

#: aiogram.filters.base.Filter.update_handler_flags of
msgid "Parameters"
msgstr ""

#: aiogram.filters.base.Filter.update_handler_flags:3 of
msgid "existing flags, can be updated directly"
msgstr ""

#: ../../dispatcher/filters/index.rst:51
msgid "Own filter example"
msgstr ""

#: ../../dispatcher/filters/index.rst:53
msgid "For example if you need to make simple text filter:"
msgstr ""
