# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version:  aiogram\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 20:53+0300\n"
"PO-Revision-Date: 2022-10-25 18:31+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../dispatcher/filters/callback_data.rst:3
msgid "Callback Data Factory & Filter"
msgstr "Фабрика міток зворотнього виклику та фільтрування"

#: aiogram.filters.callback_data.CallbackData:1 of
msgid "Base class for callback data wrapper"
msgstr "Базовий клас для обгортки мітки зворотного виклику"

#: aiogram.filters.callback_data.CallbackData:3 of
msgid "This class should be used as super-class of user-defined callbacks."
msgstr ""
"Цей клас слід використовувати як супер-клас зворотних викликів, "
"визначених користувачем."

#: aiogram.filters.callback_data.CallbackData:5 of
msgid ""
"The class-keyword :code:`prefix` is required to define prefix and also "
"the argument :code:`sep` can be passed to define separator (default is "
":code:`:`)."
msgstr ""
"Ключове слово класу :code:`prefix` потрібне для визначення префікса, а "
"також аргумент :code:`sep` можна передати для визначення роздільника (за "
"замовчуванням це :code:`:`)."

#: aiogram.filters.callback_data.CallbackData.pack:1 of
msgid "Generate callback data string"
msgstr "Генерування рядок мітки зворотного виклику"

#: aiogram.filters.callback_data.CallbackData.filter
#: aiogram.filters.callback_data.CallbackData.pack
#: aiogram.filters.callback_data.CallbackData.unpack of
msgid "Returns"
msgstr "Повертає"

#: aiogram.filters.callback_data.CallbackData.pack:3 of
msgid "valid callback data for Telegram Bot API"
msgstr "дійсна мітка зворотного виклику для Telegram Bot API"

#: aiogram.filters.callback_data.CallbackData.unpack:1 of
msgid "Parse callback data string"
msgstr "Аналіз рядка мітки зворотного виклику"

#: aiogram.filters.callback_data.CallbackData.filter
#: aiogram.filters.callback_data.CallbackData.unpack of
msgid "Parameters"
msgstr "Параметри"

#: aiogram.filters.callback_data.CallbackData.unpack:3 of
msgid "value from Telegram"
msgstr "значення з Telegram"

#: aiogram.filters.callback_data.CallbackData.unpack:4 of
msgid "instance of CallbackData"
msgstr "екземпляр мітки зворотного виклику"

#: aiogram.filters.callback_data.CallbackData.filter:1 of
msgid "Generates a filter for callback query with rule"
msgstr "Створює фільтр для запиту зворотного виклику з правилом"

#: aiogram.filters.callback_data.CallbackData.filter:3 of
msgid "magic rule"
msgstr "магічне правило"

#: aiogram.filters.callback_data.CallbackData.filter:4 of
msgid "instance of filter"
msgstr "екземпляр фільтру"

#: ../../dispatcher/filters/callback_data.rst:11
msgid "Usage"
msgstr "Використання"

#: ../../dispatcher/filters/callback_data.rst:13
msgid "Create subclass of :code:`CallbackData`:"
msgstr "Створення підкласу :code:`CallbackData`:"

#: ../../dispatcher/filters/callback_data.rst:21
msgid "After that you can generate any callback based on this class, for example:"
msgstr ""
"Після цього ви можете створити будь-який зворотній виклик на основі цього"
" класу, наприклад:"

#: ../../dispatcher/filters/callback_data.rst:29
msgid ""
"So... Now you can use this class to generate any callbacks with defined "
"structure"
msgstr ""
"Отже... Тепер ви можете використовувати цей клас для створення будь-яких "
"зворотних викликів із визначеною структурою"

#: ../../dispatcher/filters/callback_data.rst:41
msgid "... and handle by specific rules"
msgstr "... і обробляти за певними правилами"

#: ../../dispatcher/filters/callback_data.rst:54
msgid ""
"You can accept :code:`callback_data` as another argument to the handler, "
"and it will be unpacked to instance of :code:`MyCallback` class. **The "
"unpacking is performed only if the handler is decorated with** "
":code:`MyCallback.filter(...)`."
msgstr ""
"Ви можете приймати :code:`callback_data` як додатковий аргумент до обробника, "
"і він буде розпакований до екземпляру класу :code:`MyCallback`. **Розпакування "
"виконується тільки якщо обробник декорований** :code:`MyCallback.filter(...)`."

#: ../../dispatcher/filters/callback_data.rst:58
msgid "Also can be used in :doc:`Keyboard builder </utils/keyboard>`:"
msgstr "Також може бути використаний в :doc:`Конструкторі клавіатури </utils/keyboard>`:"

#: ../../dispatcher/filters/callback_data.rst:69
msgid "Another abstract example:"
msgstr "Ще один абстрактний приклад:"

#: ../../dispatcher/filters/callback_data.rst:107
msgid "Known limitations"
msgstr "Відомі обмеження"

#: ../../dispatcher/filters/callback_data.rst:109
msgid "Allowed types and their subclasses:"
msgstr "Дозволені типи та їх підкласи:"

#: ../../dispatcher/filters/callback_data.rst:111
msgid ":code:`str`"
msgstr ":code:`str`"

#: ../../dispatcher/filters/callback_data.rst:112
msgid ":code:`int`"
msgstr ":code:`int`"

#: ../../dispatcher/filters/callback_data.rst:113
msgid ":code:`bool`"
msgstr ":code:`bool`"

#: ../../dispatcher/filters/callback_data.rst:114
msgid ":code:`float`"
msgstr ":code:`float`"

#: ../../dispatcher/filters/callback_data.rst:115
msgid ":code:`Decimal`  (:code:`from decimal import Decimal`)"
msgstr ":code:`Decimal`  (:code:`from decimal import Decimal`)"

#: ../../dispatcher/filters/callback_data.rst:116
msgid ":code:`Fraction`  (:code:`from fractions import Fraction`)"
msgstr ":code:`Fraction`  (:code:`from fractions import Fraction`)"

#: ../../dispatcher/filters/callback_data.rst:117
msgid ":code:`UUID` (:code:`from uuid import UUID`)"
msgstr ":code:`UUID` (:code:`from uuid import UUID`)"

#: ../../dispatcher/filters/callback_data.rst:118
msgid ":code:`Enum` (:code:`from enum import Enum`, only for string enums)"
msgstr ":code:`Enum` (:code:`from enum import Enum`, лише для переліків рядків)"

#: ../../dispatcher/filters/callback_data.rst:119
msgid ":code:`IntEnum` (:code:`from enum import IntEnum`, only for int enums)"
msgstr ""
":code:`IntEnum` (:code:`from enum import IntEnum`, тільки для переліків "
"int)"

#: ../../dispatcher/filters/callback_data.rst:124
msgid ""
"Note that the integer Enum's should be always is subclasses of "
":code:`IntEnum` in due to parsing issues."
msgstr ""
"Зауважте, що ціле число Enum завжди має бути підкласом :code:`IntEnum` "
"через проблеми з синтаксичним аналізом."
