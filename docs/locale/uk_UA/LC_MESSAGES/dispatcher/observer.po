# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version:  aiogram\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-19 22:52+0300\n"
"PO-Revision-Date: 2022-10-19 22:50+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../dispatcher/observer.rst:3
msgid "Observer"
msgstr "Обсервер"

#: ../../dispatcher/observer.rst:5
msgid ""
"Observer is used for filtering and handling different events. That is "
"part of internal API with some public methods and is recommended to don't"
" use methods is not listed here."
msgstr ""
"Обсервер використовується для фільтрації та обробки різних подій. Це "
"частина внутрішнього API з деякими публічними методами, тому "
"рекомендується не використовувати методи, яких тут немає."

#: ../../dispatcher/observer.rst:7
msgid "In `aiogram` framework is available two variants of observer:"
msgstr "У фреймвоку `aiogram` доступні два варіанти обсервера:"

#: ../../dispatcher/observer.rst:9
msgid "`EventObserver <#eventobserver>`__"
msgstr "`EventObserver <#eventobserver>`__"

#: ../../dispatcher/observer.rst:10
msgid "`TelegramEventObserver <#telegrameventobserver>`__"
msgstr "`TelegramEventObserver <#telegrameventobserver>`__"

#: ../../dispatcher/observer.rst:14
msgid "EventObserver"
msgstr "EventObserver"

#: aiogram.dispatcher.event.event.EventObserver:1 of
msgid "Simple events observer"
msgstr "Простий обсервер(спостерігач) подій"

#: aiogram.dispatcher.event.event.EventObserver:3 of
msgid ""
"Is used for managing events is not related with Telegram (For example "
"startup/shutdown processes)"
msgstr ""
"Використовується для керування подіями, не пов’язаними з Telegram "
"(наприклад, запуску/вимкнення процесів)"

#: aiogram.dispatcher.event.event.EventObserver:5 of
msgid "Handlers can be registered via decorator or method"
msgstr "Обробники(Handler) можна зареєструвати за допомогою декоратора або методу"

#: aiogram.dispatcher.event.event.EventObserver.register:1 of
msgid "Register callback with filters"
msgstr "Реєстрація обробника(callback) з фільтрами"

#: aiogram.dispatcher.event.event.EventObserver.trigger:1 of
msgid ""
"Propagate event to handlers. Handler will be called when all its filters "
"is pass."
msgstr ""
"Передача події обробникам подій(handler). Обробник буде викликано, коли "
"всі його фільтри пройдено."

#: aiogram.dispatcher.event.event.EventObserver.__call__:1
#: aiogram.dispatcher.event.telegram.TelegramEventObserver.__call__:1 of
msgid "Decorator for registering event handlers"
msgstr "Декоратор для реєстрації обробника подій(handler)"

#: ../../dispatcher/observer.rst:22
msgid "TelegramEventObserver"
msgstr "TelegramEventObserver"

#: aiogram.dispatcher.event.telegram.TelegramEventObserver:1 of
msgid "Event observer for Telegram events"
msgstr "Обсервер подій для подій Telegram"

#: aiogram.dispatcher.event.telegram.TelegramEventObserver:3 of
msgid ""
"Here you can register handler with filter. This observer will stop event "
"propagation when first handler is pass."
msgstr ""
"Тут Ви можете зареєструвати обробник(handler) із фільтрами. Цей обсервер "
"зупинить розповсюдження події, коли справцює перший обробник(handler)."

#: aiogram.dispatcher.event.telegram.TelegramEventObserver.register:1 of
msgid "Register event handler"
msgstr "Реєстрація обробника подій(handler)"

#: aiogram.dispatcher.event.telegram.TelegramEventObserver.trigger:1 of
msgid ""
"Propagate event to handlers and stops propagation on first match. Handler"
" will be called when all its filters is pass."
msgstr ""
"Передача події обробнику подій(handler) та зупинка при першому ж збігу. "
"Обробник(handler) буде викликало, коли всі його фільтри пройдено."

