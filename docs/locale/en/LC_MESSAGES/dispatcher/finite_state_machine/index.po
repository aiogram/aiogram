# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-01 22:51+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../dispatcher/finite_state_machine/index.rst:3
msgid "Finite State Machine"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:5
msgid ""
"A finite-state machine (FSM) or finite-state automaton (FSA, plural: "
"automata), finite automaton, or simply a state machine, is a mathematical"
" model of computation."
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:8
msgid ""
"It is an abstract machine that can be in exactly one of a finite number "
"of states at any given time. The FSM can change from one state to another"
" in response to some inputs; the change from one state to another is "
"called a transition."
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:12
msgid ""
"An FSM is defined by a list of its states, its initial state, and the "
"inputs that trigger each transition."
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:19
msgid "Source: `WikiPedia <wiki>`_"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:22
msgid "Usage example"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:24
msgid ""
"Not all functionality of the bot can be implemented as single handler, "
"for example you will need to collect some data from user in separated "
"steps you will need to use FSM."
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:-1
msgid "FSM Example"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:31
msgid "Let's see how to do that step-by-step"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:34
msgid "Step by step"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:36
msgid ""
"Before handle any states you will need to specify what kind of states you"
" want to handle"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:44
msgid "And then write handler for each state separately from the start of dialog"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:46
msgid ""
"Here is dialog can be started only via command :code:`/start`, so lets "
"handle it and make transition user to state :code:`Form.name`"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:54
msgid ""
"After that you will need to save some data to the storage and make "
"transition to next step."
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:62
msgid ""
"At the next steps user can make different answers, it can be `yes`, `no` "
"or any other"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:64
msgid "Handle :code:`yes` and soon we need to handle :code:`Form.language` state"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:72
msgid "Handle :code:`no`"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:80
msgid "And handle any other answers"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:88
msgid ""
"All possible cases of `like_bots` step was covered, let's implement "
"finally step"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:96
msgid ""
"And now you have covered all steps from the image, but you can make "
"possibility to cancel conversation, lets do that via command or text"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:105
msgid "Complete example"
msgstr ""

#: ../../dispatcher/finite_state_machine/index.rst:112
msgid "Read more"
msgstr ""
