# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, aiogram Team
# This file is distributed under the same license as the aiogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-26 16:57+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ru\n"
"Language-Team: ru <LL@li.org>\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../dispatcher/filters/index.rst:3
msgid "Filtering events"
msgstr ""

#: ../../dispatcher/filters/index.rst:5
msgid ""
"Filters is needed for routing updates to the specific handler. Searching "
"of handler is always stops on first match set of filters are pass."
msgstr ""

#: ../../dispatcher/filters/index.rst:8
msgid "*aiogram* has some builtin useful filters."
msgstr ""

#: ../../dispatcher/filters/index.rst:11
msgid "Builtin filters"
msgstr ""

#: ../../dispatcher/filters/index.rst:13
msgid "Here is list of builtin filters:"
msgstr ""

#: ../../dispatcher/filters/index.rst:27
msgid "Writing own filters"
msgstr ""

#: ../../dispatcher/filters/index.rst:29
msgid "Filters can be:"
msgstr ""

#: ../../dispatcher/filters/index.rst:31
msgid "Asynchronous function (:code:`async def my_filter(*args, **kwargs): pass`)"
msgstr ""

#: ../../dispatcher/filters/index.rst:32
msgid "Synchronous function (:code:`def my_filter(*args, **kwargs): pass`)"
msgstr ""

#: ../../dispatcher/filters/index.rst:33
msgid "Anonymous function (:code:`lambda event: True`)"
msgstr ""

#: ../../dispatcher/filters/index.rst:34
msgid "Any awaitable object"
msgstr ""

#: ../../dispatcher/filters/index.rst:35
msgid "Subclass of :class:`aiogram.filters.base.Filter`"
msgstr ""

#: ../../dispatcher/filters/index.rst:36
msgid "Instances of :ref:`MagicFilter <magic-filters>`"
msgstr ""

#: ../../dispatcher/filters/index.rst:38
msgid ""
"and should return bool or dict. If the dictionary is passed as result of "
"filter - resulted data will be propagated to the next filters and handler"
" as keywords arguments."
msgstr ""

#: ../../dispatcher/filters/index.rst:43
msgid "Base class for own filters"
msgstr ""

#: ../../dispatcher/filters/index.rst:51
msgid "Own filter example"
msgstr ""

#: ../../dispatcher/filters/index.rst:53
msgid "For example if you need to make simple text filter:"
msgstr ""

#: ../../dispatcher/filters/index.rst:60
msgid "Combining Filters"
msgstr ""

#: ../../dispatcher/filters/index.rst:62
msgid "In general, all filters can be combined in two ways"
msgstr ""

#: ../../dispatcher/filters/index.rst:66
msgid "Recommended way"
msgstr ""

#: ../../dispatcher/filters/index.rst:68
msgid ""
"If you specify multiple filters in a row, it will be checked with an "
"\"and\" condition:"
msgstr ""

#: ../../dispatcher/filters/index.rst:75
msgid ""
"Also, if you want to use two alternative ways to run the same handler "
"(\"or\" condition) you can register the handler twice or more times as "
"you like"
msgstr ""

#: ../../dispatcher/filters/index.rst:84
msgid ""
"Also sometimes you will need to invert the filter result, for example you"
" have an *IsAdmin* filter and you want to check if the user is not an "
"admin"
msgstr ""

#: ../../dispatcher/filters/index.rst:93
msgid "Another possible way"
msgstr ""

#: ../../dispatcher/filters/index.rst:95
msgid ""
"An alternative way is to combine using special functions (:func:`and_f`, "
":func:`or_f`, :func:`invert_f` from :code:`aiogram.filters` module):"
msgstr ""

