{
  "meta": {},
  "group": {
    "title": "Available types",
    "anchor": "available-types"
  },
  "object": {
    "anchor": "inputpaidmediavideo",
    "name": "InputPaidMediaVideo",
    "description": "The paid media to send is a video.",
    "html_description": "<p>The paid media to send is a video.</p>",
    "rst_description": "The paid media to send is a video.",
    "annotations": [
      {
        "type": "String",
        "description": "Type of the media, must be video",
        "html_description": "<td>Type of the media, must be <em>video</em></td>",
        "rst_description": "Type of the media, must be *video*\n",
        "name": "type",
        "required": true
      },
      {
        "type": "String",
        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass 'attach://<file_attach_name>' to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files",
        "html_description": "<td>File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass &#8220;attach://&lt;file_attach_name&gt;&#8221; to upload a new one using multipart/form-data under &lt;file_attach_name&gt; name. <a href=\"#sending-files\">More information on Sending Files &#187;</a></td>",
        "rst_description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass 'attach://<file_attach_name>' to upload a new one using multipart/form-data under <file_attach_name> name. :ref:`More information on Sending Files » <sending-files>`\n",
        "name": "media",
        "required": true
      },
      {
        "type": "InputFile or String",
        "description": "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass 'attach://<file_attach_name>' if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files",
        "html_description": "<td><em>Optional</em>. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass &#8220;attach://&lt;file_attach_name&gt;&#8221; if the thumbnail was uploaded using multipart/form-data under &lt;file_attach_name&gt;. <a href=\"#sending-files\">More information on Sending Files &#187;</a></td>",
        "rst_description": "*Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass 'attach://<file_attach_name>' if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. :ref:`More information on Sending Files » <sending-files>`\n",
        "name": "thumbnail",
        "required": false
      },
      {
        "type": "Integer",
        "description": "Video width",
        "html_description": "<td><em>Optional</em>. Video width</td>",
        "rst_description": "*Optional*. Video width\n",
        "name": "width",
        "required": false
      },
      {
        "type": "Integer",
        "description": "Video height",
        "html_description": "<td><em>Optional</em>. Video height</td>",
        "rst_description": "*Optional*. Video height\n",
        "name": "height",
        "required": false
      },
      {
        "type": "Integer",
        "description": "Video duration in seconds",
        "html_description": "<td><em>Optional</em>. Video duration in seconds</td>",
        "rst_description": "*Optional*. Video duration in seconds\n",
        "name": "duration",
        "required": false
      },
      {
        "type": "Boolean",
        "description": "Pass True if the uploaded video is suitable for streaming",
        "html_description": "<td><em>Optional</em>. Pass <em>True</em> if the uploaded video is suitable for streaming</td>",
        "rst_description": "*Optional*. Pass :code:`True` if the uploaded video is suitable for streaming\n",
        "name": "supports_streaming",
        "required": false
      }
    ],
    "category": "types"
  }
}
