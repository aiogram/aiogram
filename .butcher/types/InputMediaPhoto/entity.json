{
  "meta": {},
  "group": {
    "title": "Available types",
    "anchor": "available-types"
  },
  "object": {
    "anchor": "inputmediaphoto",
    "name": "InputMediaPhoto",
    "description": "Represents a photo to be sent.",
    "html_description": "<p>Represents a photo to be sent.</p>",
    "rst_description": "Represents a photo to be sent.",
    "annotations": [
      {
        "type": "String",
        "description": "Type of the result, must be photo",
        "html_description": "<td>Type of the result, must be <em>photo</em></td>",
        "rst_description": "Type of the result, must be *photo*\n",
        "name": "type",
        "required": true
      },
      {
        "type": "String",
        "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass 'attach://<file_attach_name>' to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files",
        "html_description": "<td>File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass &#8220;attach://&lt;file_attach_name&gt;&#8221; to upload a new one using multipart/form-data under &lt;file_attach_name&gt; name. <a href=\"#sending-files\">More information on Sending Files &#187;</a></td>",
        "rst_description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass 'attach://<file_attach_name>' to upload a new one using multipart/form-data under <file_attach_name> name. :ref:`More information on Sending Files Â» <sending-files>`\n",
        "name": "media",
        "required": true
      },
      {
        "type": "String",
        "description": "Caption of the photo to be sent, 0-1024 characters after entities parsing",
        "html_description": "<td><em>Optional</em>. Caption of the photo to be sent, 0-1024 characters after entities parsing</td>",
        "rst_description": "*Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing\n",
        "name": "caption",
        "required": false
      },
      {
        "type": "String",
        "description": "Mode for parsing entities in the photo caption. See formatting options for more details.",
        "html_description": "<td><em>Optional</em>. Mode for parsing entities in the photo caption. See <a href=\"#formatting-options\">formatting options</a> for more details.</td>",
        "rst_description": "*Optional*. Mode for parsing entities in the photo caption. See `formatting options <https://core.telegram.org/bots/api#formatting-options>`_ for more details.\n",
        "name": "parse_mode",
        "required": false
      },
      {
        "type": "Array of MessageEntity",
        "description": "List of special entities that appear in the caption, which can be specified instead of parse_mode",
        "html_description": "<td><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <em>parse_mode</em></td>",
        "rst_description": "*Optional*. List of special entities that appear in the caption, which can be specified instead of *parse_mode*\n",
        "name": "caption_entities",
        "required": false
      },
      {
        "type": "Boolean",
        "description": "Pass True if the photo needs to be covered with a spoiler animation",
        "html_description": "<td><em>Optional</em>. Pass <em>True</em> if the photo needs to be covered with a spoiler animation</td>",
        "rst_description": "*Optional*. Pass :code:`True` if the photo needs to be covered with a spoiler animation\n",
        "name": "has_spoiler",
        "required": false
      }
    ],
    "category": "types"
  }
}
